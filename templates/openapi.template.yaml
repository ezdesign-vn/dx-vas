# ===================================================================
# üìò OpenAPI Specification Template (D·ª±a tr√™n User Service Sub 5‚òÖ)
# ===================================================================
# H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng template n√†y:
# 1. Sao ch√©p file n√†y v√† ƒë·ªïi t√™n th√†nh openapi.yaml cho service m·ªõi c·ªßa b·∫°n.
# 2. T√¨m v√† thay th·∫ø c√°c placeholder c√≥ d·∫°ng "[PLACEHOLDER]" ho·∫∑c c√°c comment "TODO:"
#    b·∫±ng th√¥ng tin c·ª• th·ªÉ c·ªßa service b·∫°n.
# 3. Xem x√©t v√† ƒëi·ªÅu ch·ªânh c√°c ph·∫ßn cho ph√π h·ª£p v·ªõi logic v√† y√™u c·∫ßu c·ªßa service.
# 4. Lu√¥n tham chi·∫øu ƒë·∫øn c√°c ADRs li√™n quan c·ªßa h·ªá th·ªëng dx-vas.
# ===================================================================

openapi: 3.0.3 # Phi√™n b·∫£n OpenAPI Specification ƒëang s·ª≠ d·ª•ng. Gi·ªØ ·ªïn ƒë·ªãnh ƒë·ªÉ ƒë·∫£m b·∫£o t∆∞∆°ng th√≠ch c√¥ng c·ª•.
info:
  title: "[SERVICE_NAME] ‚Äì API Spec" # TODO: Thay [SERVICE_NAME] b·∫±ng t√™n service c·ª• th·ªÉ (v√≠ d·ª•: Order Service, Notification Service Sub)
  version: "1.0.0" # TODO: Phi√™n b·∫£n SEMANTIC VERSIONING c·ªßa API service n√†y (v√≠ d·ª•: 1.0.0, 0.1.0-beta).
  description: |
    # TODO: M√¥ t·∫£ chi ti·∫øt v·ªÅ service v√† c√°c API c·ªßa n√≥.
    # - M·ª•c ƒë√≠ch ch√≠nh c·ªßa service l√† g√¨?
    # - C√°c nh√≥m ch·ª©c nƒÉng ch√≠nh m√† API cung c·∫•p.
    # - Nh·∫•n m·∫°nh c√°c nguy√™n t·∫Øc thi·∫øt k·∫ø ch√≠nh (v√≠ d·ª•: read-only, event-driven).
    # - Lu√¥n tham chi·∫øu ƒë·∫øn c√°c ADRs quan tr·ªçng c·ªßa h·ªá th·ªëng dx-vas m√† service n√†y tu√¢n th·ªß, v√≠ d·ª•:
    OpenAPI specification cho `[service-name]`.
    Tu√¢n th·ªß [ADR-012 Response Structure](../../../ADR/adr-012-response-structure.md),
    [ADR-011 Error Format](../../../ADR/adr-011-api-error-format.md),
    v√† c√°c nguy√™n t·∫Øc trong [ADR-027 Data Management Strategy](../../../ADR/adr-027-data-management-strategy.md) (n·∫øu c√≥ li√™n quan).
    Xem th√™m t√†i li·ªáu thi·∫øt k·∫ø chi ti·∫øt t·∫°i: [design.md](../design.md) v√† [interface-contract.md](../interface-contract.md) (n·∫øu c√≥).
  contact:
    name: "[YOUR_TEAM_NAME] Team" # TODO: T√™n ƒë·ªôi ng≈© ph√°t tri·ªÉn/ch·ªß s·ªü h·ªØu API. V√≠ d·ª•: VAS DX Architecture Team
    email: "[your_team_email@example.com]" # TODO: Email li√™n h·ªá c·ªßa ƒë·ªôi ng≈©.

  # --- Custom Extensions (x-prefixed) for API Governance & Metadata ---
  # C√°c extension n√†y gi√∫p qu·∫£n l√Ω v√† theo d√µi API t·ªët h∆°n.
  x-api-version: "v1" # TODO: Phi√™n b·∫£n nghi·ªáp v·ª• c·ªßa API (kh√°c v·ªõi info.version l√† phi√™n b·∫£n c·ªßa spec file n√†y). V√≠ d·ª•: v1, v2.
  x-last-updated: "YYYY-MM-DD" # TODO: Ng√†y c·∫≠p nh·∫≠t cu·ªëi c√πng c·ªßa file spec n√†y.
  x-author: "[Your Name/Team]" # TODO: T√°c gi·∫£ c·ªßa file spec n√†y.
  x-reviewed-by: "[Reviewer Name/Team]" # TODO: Ng∆∞·ªùi ho·∫∑c ƒë·ªôi ng≈© ƒë√£ review file spec n√†y.
  x-purpose: | # TODO: M√¥ t·∫£ m·ª•c ƒë√≠ch ch√≠nh c·ªßa API n√†y m·ªôt c√°ch ng·∫Øn g·ªçn, c√≥ th·ªÉ d√πng cho c√°c c√¥ng c·ª• t·ª± ƒë·ªông ho·∫∑c catalogue API.
    Cung c·∫•p c√°c API [m√¥ t·∫£ m·ª•c ƒë√≠ch, v√≠ d·ª•: ƒë·ªçc d·ªØ li·ªáu ng∆∞·ªùi d√πng c·ª•c b·ªô cho tenant].
  x-adr-compliance: # TODO: Li·ªát k√™ c√°c ADRs ch√≠nh m√† API n√†y tu√¢n th·ªß.
    - adr-011-api-error-format
    - adr-012-response-structure
    # - adr-013-path-naming-convention (n·∫øu √°p d·ª•ng ch·∫∑t ch·∫Ω)
    # - adr-xxx (c√°c ADR kh√°c li√™n quan)

externalDocs: # TODO: N·∫øu c√≥ t√†i li·ªáu b√™n ngo√†i (wiki, GitHub pages) m√¥ t·∫£ chi ti·∫øt h∆°n v·ªÅ service ho·∫∑c API.
  description: Design and Interface Documentation for [SERVICE_NAME]
  url: https://github.com/ezdesign-vn/dx-vas/tree/main/docs/services/[service-name]/

servers:
  # TODO: Khai b√°o URL c·ªßa c√°c server cho t·ª´ng m√¥i tr∆∞·ªùng.
  # N√™n c√≥ √≠t nh·∫•t cho Production. C√°c m√¥i tr∆∞·ªùng kh√°c (Staging, Dev) t√πy ch·ªçn.
  - url: https://api.truongvietanh.edu.vn/[service-path-prod] # TODO: Thay [service-path-prod]
    description: Production Environment ([scope, v√≠ d·ª•: tenant-scoped ho·∫∑c global])
  - url: https://staging-api.truongvietanh.edu.vn/[service-path-staging]
    description: Staging Environment
  # - url: http://localhost:[port]/[service-path-dev]
  #   description: Local Development Environment

tags:
  # TODO: ƒê·ªãnh nghƒ©a c√°c tags ƒë·ªÉ nh√≥m c√°c API m·ªôt c√°ch logic.
  # M·ªói API operation n√™n ƒë∆∞·ª£c g√°n √≠t nh·∫•t m·ªôt tag.
  - name: resource-group-1 # TODO: Thay b·∫±ng t√™n nh√≥m t√†i nguy√™n/ch·ª©c nƒÉng, v√≠ d·ª•: users, orders, products
    description: "M√¥ t·∫£ v·ªÅ nh√≥m API [resource-group-1]"
  - name: resource-group-2 # TODO: Th√™m c√°c nh√≥m kh√°c n·∫øu c·∫ßn
    description: "M√¥ t·∫£ v·ªÅ nh√≥m API [resource-group-2]"

# --- Global Security Requirement ---
# TODO: √Åp d·ª•ng c∆° ch·∫ø x√°c th·ª±c m·∫∑c ƒë·ªãnh cho t·∫•t c·∫£ c√°c API.
# C√≥ th·ªÉ override ·ªü m·ª©c operation n·∫øu API ƒë√≥ kh√¥ng c·∫ßn x√°c th·ª±c ho·∫∑c d√πng c∆° ch·∫ø kh√°c.
security:
  - BearerAuth: [] # Gi·∫£ s·ª≠ BearerAuth l√† security scheme m·∫∑c ƒë·ªãnh.

components:
  securitySchemes:
    # TODO: ƒê·ªãnh nghƒ©a c√°c c∆° ch·∫ø x√°c th·ª±c m√† API c·ªßa b·∫°n s·ª≠ d·ª•ng.
    BearerAuth: # T√™n c·ªßa security scheme, ƒë∆∞·ª£c tham chi·∫øu ·ªü 'security' global ho·∫∑c operation.
      type: http
      scheme: bearer
      bearerFormat: JWT # Cho bi·∫øt token l√† JWT.
      description: "X√°c th·ª±c b·∫±ng JWT Bearer token. Client c·∫ßn g·ª≠i header `Authorization: Bearer <your_jwt_token>`."

  headers:
    # TODO: ƒê·ªãnh nghƒ©a c√°c response headers th∆∞·ªùng d√πng ƒë·ªÉ t√°i s·ª≠ d·ª•ng.
    X-Request-ID:
      description: "Unique ID ƒë∆∞·ª£c g√°n cho m·ªói request, h·ªØu √≠ch cho vi·ªác tracing v√† debugging."
      schema:
        type: string
        format: uuid # Ho·∫∑c m·ªôt format kh√°c n·∫øu b·∫°n c√≥ quy ∆∞·ªõc ri√™ng.
      example: "7e8f7f34-b12a-4d8c-b32f-6db7d326f7d2"
    # X-RateLimit-Limit:
    #   description: "S·ªë l∆∞·ª£ng request t·ªëi ƒëa ƒë∆∞·ª£c ph√©p trong m·ªôt kho·∫£ng th·ªùi gian."
    #   schema: { type: integer }
    # X-RateLimit-Remaining:
    #   description: "S·ªë l∆∞·ª£ng request c√≤n l·∫°i trong kho·∫£ng th·ªùi gian hi·ªán t·∫°i."
    #   schema: { type: integer }
    # X-RateLimit-Reset:
    #   description: "Th·ªùi gian (gi√¢y) c√≤n l·∫°i cho ƒë·∫øn khi gi·ªõi h·∫°n ƒë∆∞·ª£c reset."
    #   schema: { type: integer }

  parameters:
    # TODO: ƒê·ªãnh nghƒ©a c√°c request parameters (query, path, header) th∆∞·ªùng d√πng ƒë·ªÉ t√°i s·ª≠ d·ª•ng.
    AuthorizationHeader: # T√™n n√†y ƒë∆∞·ª£c tham chi·∫øu trong c√°c operation.
      name: Authorization # T√™n header th·ª±c t·∫ø.
      in: header
      required: true # Header n√†y l√† b·∫Øt bu·ªôc.
      schema:
        type: string
      description: "Bearer JWT token (format: 'Bearer <access_token>'). Token n√†y nh·∫≠n ƒë∆∞·ª£c sau khi ng∆∞·ªùi d√πng ƒëƒÉng nh·∫≠p th√†nh c√¥ng."
      example: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
    # PageParam:
    #   name: page
    #   in: query
    #   description: "S·ªë trang hi·ªán t·∫°i cho k·∫øt qu·∫£ ph√¢n trang (b·∫Øt ƒë·∫ßu t·ª´ 1)."
    #   required: false
    #   schema: { type: integer, default: 1, minimum: 1 }
    # LimitParam:
    #   name: limit
    #   in: query
    #   description: "S·ªë l∆∞·ª£ng b·∫£n ghi t·ªëi ƒëa tr·∫£ v·ªÅ m·ªói trang."
    #   required: false
    #   schema: { type: integer, default: 20, minimum: 1, maximum: 100 } # Gi·ªõi h·∫°n maximum ƒë·ªÉ tr√°nh qu√° t·∫£i.

  schemas:
    # === Generic Schemas - N√™n ƒë∆∞·ª£c chu·∫©n h√≥a v√† t√°i s·ª≠ d·ª•ng tr√™n to√†n h·ªá th·ªëng dx-vas ===
    ResponseMeta:
      type: object
      required: [request_id, timestamp] # C√°c tr∆∞·ªùng b·∫Øt bu·ªôc trong meta.
      properties:
        request_id:
          type: string
          description: "M√£ ƒë·ªãnh danh c·ªßa request, gi√∫p li√™n k·∫øt log v√† trace."
          example: "req-xyz-789abc"
        timestamp:
          type: string
          format: date-time # ISO 8601 format.
          description: "Th·ªùi gian server tr·∫£ v·ªÅ response."
          example: "2025-06-02T10:15:30Z"
        # --- C√°c tr∆∞·ªùng sau d√πng cho pagination, ch·ªâ xu·∫•t hi·ªán khi API tr·∫£ v·ªÅ danh s√°ch ---
        page:
          type: integer
          nullable: true # Cho ph√©p null n·∫øu API kh√¥ng ph√¢n trang.
          description: "S·ªë trang hi·ªán t·∫°i c·ªßa k·∫øt qu·∫£ (n·∫øu c√≥ ph√¢n trang)."
          example: 1
        per_page:
          type: integer
          nullable: true
          description: "S·ªë l∆∞·ª£ng b·∫£n ghi tr√™n m·ªói trang (n·∫øu c√≥ ph√¢n trang)."
          example: 20
        total_items: # ƒê·ªïi t·ª´ 'total' ƒë·ªÉ r√µ nghƒ©a h∆°n.
          type: integer
          nullable: true
          description: "T·ªïng s·ªë b·∫£n ghi kh·ªõp v·ªõi truy v·∫•n (n·∫øu c√≥ ph√¢n trang)."
          example: 125
        total_pages: # Tr∆∞·ªùng t√≠nh to√°n, h·ªØu √≠ch cho client.
          type: integer
          nullable: true
          description: "T·ªïng s·ªë trang (n·∫øu c√≥ ph√¢n trang)."
          example: 7
      description: "Metadata chung cho m·ªçi API response, tu√¢n th·ªß ADR-012."

    ErrorEnvelope: # C·∫•u tr√∫c bao ngo√†i cho l·ªói, tu√¢n th·ªß ADR-012.
      type: object
      required: [meta, error]
      properties:
        meta:
          $ref: '#/components/schemas/ResponseMeta'
        error:
          $ref: '#/components/schemas/ErrorResponse'
      description: "C·∫•u tr√∫c chu·∫©n cho response l·ªói, bao g·ªìm metadata v√† chi ti·∫øt l·ªói."

    ErrorResponse: # Chi ti·∫øt l·ªói, tu√¢n th·ªß ADR-011.
      type: object
      required: [code, message] # 'code' v√† 'message' l√† b·∫Øt bu·ªôc.
      properties:
        code:
          type: string
          description: "M√£ l·ªói ·ª©ng d·ª•ng (application-specific error code), gi√∫p client x·ª≠ l√Ω l·ªói m·ªôt c√°ch l·∫≠p tr√¨nh."
          example: "FORBIDDEN_ACCESS" # N√™n d√πng m√£ l·ªói d·∫°ng ENUM string.
        message:
          type: string
          description: "M√¥ t·∫£ l·ªói th√¢n thi·ªán v·ªõi ng∆∞·ªùi d√πng ho·∫∑c developer, c√≥ th·ªÉ hi·ªÉn th·ªã tr√™n UI ho·∫∑c ghi log."
          example: "B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p t√†i nguy√™n n√†y."
        details: # TODO: 'details' l√† t√πy ch·ªçn, c√≥ th·ªÉ ch·ª©a th√¥ng tin c·ª• th·ªÉ h∆°n v·ªÅ l·ªói (v√≠ d·ª•: l·ªói validation cho t·ª´ng tr∆∞·ªùng).
          type: object # Ho·∫∑c array of objects
          nullable: true
          description: "Th√¥ng tin chi ti·∫øt b·ªï sung v·ªÅ l·ªói (v√≠ d·ª•: field n√†o b·ªã l·ªói validation)."
          example: { "field": "email", "reason": "invalid_format" }
      description: "C·∫•u tr√∫c chi ti·∫øt c·ªßa m·ªôt l·ªói ·ª©ng d·ª•ng."

    # === ENUM Schemas - ƒê·ªãnh nghƒ©a c√°c ENUM d√πng chung ===
    # TODO: Th√™m c√°c ENUM c·ª• th·ªÉ cho service c·ªßa b·∫°n. V√≠ d·ª•:
    # OrderStatus:
    #   type: string
    #   description: "Tr·∫°ng th√°i c·ªßa m·ªôt ƒë∆°n h√†ng."
    #   enum: [pending, processing, shipped, delivered, cancelled]
    #   example: "processing"
    AuthProvider: # V√≠ d·ª• t·ª´ User Service Sub
      type: string
      description: "Ph∆∞∆°ng th·ª©c x√°c th·ª±c ng∆∞·ªùi d√πng."
      enum: [local, google]
      example: "google"
    UserStatus: # V√≠ d·ª• t·ª´ User Service Sub
      type: string
      description: "Tr·∫°ng th√°i ho·∫°t ƒë·ªông c·ªßa ng∆∞·ªùi d√πng."
      enum: [active, invited, suspended, deleted] # ƒê·∫£m b·∫£o nh·∫•t qu√°n v·ªõi data model.
      example: "active"

    # === Entity Schemas - ƒê·ªãnh nghƒ©a c√°c ƒë·ªëi t∆∞·ª£ng d·ªØ li·ªáu ch√≠nh c·ªßa service ===
    # TODO: Thay th·∫ø c√°c schema d∆∞·ªõi ƒë√¢y b·∫±ng c√°c schema th·ª±c t·∫ø c·ªßa service b·∫°n.
    # V√≠ d·ª•: UserOut, RoleOut, PermissionOut t·ª´ User Service Sub.
    MyEntityOut: # TODO: ƒê·∫∑t t√™n schema theo quy ∆∞·ªõc [EntityName]Out cho response, [EntityName]In cho request t·∫°o/s·ª≠a.
      type: object
      description: "M√¥ t·∫£ v·ªÅ [MyEntity]."
      required: # Li·ªát k√™ c√°c tr∆∞·ªùng b·∫Øt bu·ªôc.
        - id
        - name
      properties:
        id:
          type: string
          format: uuid # Ho·∫∑c integer, t√πy theo CSDL.
          description: "ID duy nh·∫•t c·ªßa [MyEntity]."
          example: "123e4567-e89b-12d3-a456-426614174000"
          readOnly: true # N·∫øu ID ƒë∆∞·ª£c sinh b·ªüi server v√† kh√¥ng cho ph√©p client ghi.
        name:
          type: string
          description: "T√™n c·ªßa [MyEntity]."
          example: "T√™n th·ª±c th·ªÉ m·∫´u"
        description:
          type: string
          nullable: true
          description: "M√¥ t·∫£ chi ti·∫øt h∆°n v·ªÅ [MyEntity]."
          example: "ƒê√¢y l√† m√¥ t·∫£ chi ti·∫øt."
        created_at:
          type: string
          format: date-time
          description: "Th·ªùi gian t·∫°o th·ª±c th·ªÉ."
          readOnly: true
          example: "2025-06-01T12:00:00Z"
        updated_at:
          type: string
          format: date-time
          description: "Th·ªùi gian c·∫≠p nh·∫≠t cu·ªëi c√πng c·ªßa th·ª±c th·ªÉ."
          readOnly: true
          example: "2025-06-02T09:30:00Z"

    MyEntityListResponse: # Schema cho response tr·∫£ v·ªÅ danh s√°ch MyEntity (c√≥ pagination).
      type: object
      required: [data, meta]
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/MyEntityOut' # Tham chi·∫øu ƒë·∫øn schema c·ªßa m·ªôt item.
          description: "Danh s√°ch c√°c [MyEntity]."
        meta:
          $ref: '#/components/schemas/ResponseMeta' # Tham chi·∫øu ƒë·∫øn schema metadata chu·∫©n.
      description: "C·∫•u tr√∫c response cho API tr·∫£ v·ªÅ danh s√°ch [MyEntity]."

    # --- V√≠ d·ª• c√°c schema c·ª• th·ªÉ t·ª´ User Service Sub ƒë·ªÉ tham kh·∫£o ---
    UserOut: # (Gi·ªØ l·∫°i l√†m v√≠ d·ª• n·∫øu template n√†y d√πng chung)
      type: object
      description: Th√¥ng tin ng∆∞·ªùi d√πng trong tenant
      # ... (c√°c properties nh∆∞ ƒë√£ c√≥ trong file User Service Sub) ...

    PermissionStringsResponse: # (Gi·ªØ l·∫°i l√†m v√≠ d·ª•)
      type: object
      required: [data, meta]
      properties:
        data:
          type: array
          items:
            type: string # Danh s√°ch c√°c permission code.
            example: "user.read"
          description: "Danh s√°ch c√°c m√£ quy·ªÅn (permission code) m√† ng∆∞·ªùi d√πng hi·ªán t·∫°i c√≥."
        meta:
          $ref: '#/components/schemas/ResponseMeta'
      description: "Response ch·ª©a danh s√°ch c√°c m√£ quy·ªÅn c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i."

  responses: # TODO: ƒê·ªãnh nghƒ©a c√°c global responses ƒë·ªÉ t√°i s·ª≠ d·ª•ng (v√≠ d·ª•: c√°c l·ªói chung).
    UnauthorizedError:
      description: "L·ªói x√°c th·ª±c: Client ch∆∞a cung c·∫•p th√¥ng tin x√°c th·ª±c h·ª£p l·ªá (v√≠ d·ª•: thi·∫øu JWT, JWT sai ho·∫∑c h·∫øt h·∫°n)."
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorEnvelope'
            example: # V√≠ d·ª• c·ª• th·ªÉ cho l·ªói n√†y.
              meta:
                request_id: "req-unauth-123"
                timestamp: "2025-06-02T11:00:00Z"
              error:
                code: "UNAUTHORIZED"
                message: "Y√™u c·∫ßu x√°c th·ª±c."
    ForbiddenError:
      description: "L·ªói ph√¢n quy·ªÅn: Client ƒë√£ x√°c th·ª±c nh∆∞ng kh√¥ng c√≥ quy·ªÅn truy c·∫≠p t√†i nguy√™n ho·∫∑c th·ª±c hi·ªán h√†nh ƒë·ªông n√†y."
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorEnvelope'
            example:
              meta:
                request_id: "req-forbidden-456"
                timestamp: "2025-06-02T11:05:00Z"
              error:
                code: "FORBIDDEN_ACCESS"
                message: "Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p."
    NotFoundError: # V√≠ d·ª• th√™m m·ªôt l·ªói chung.
      description: "L·ªói kh√¥ng t√¨m th·∫•y: T√†i nguy√™n ƒë∆∞·ª£c y√™u c·∫ßu kh√¥ng t·ªìn t·∫°i."
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorEnvelope'
            example:
              meta:
                request_id: "req-notfound-789"
                timestamp: "2025-06-02T11:10:00Z"
              error:
                code: "RESOURCE_NOT_FOUND"
                message: "T√†i nguy√™n kh√¥ng ƒë∆∞·ª£c t√¨m th·∫•y."
    InternalServerError:
      description: "L·ªói h·ªá th·ªëng n·ªôi b·ªô: M·ªôt l·ªói kh√¥ng mong mu·ªën ƒë√£ x·∫£y ra ·ªü ph√≠a server."
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorEnvelope'
            example:
              meta:
                request_id: "req-servererr-000"
                timestamp: "2025-06-02T11:15:00Z"
              error:
                code: "INTERNAL_SERVER_ERROR"
                message: "L·ªói h·ªá th·ªëng. Vui l√≤ng th·ª≠ l·∫°i sau."
    # BadRequestError: # (V√≠ d·ª•)
    #   description: "L·ªói y√™u c·∫ßu kh√¥ng h·ª£p l·ªá: D·ªØ li·ªáu ƒë·∫ßu v√†o t·ª´ client kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng ho·∫∑c thi·∫øu th√¥ng tin."
    #   content:
    #     application/json:
    #       schema:
    #         $ref: '#/components/schemas/ErrorEnvelope'

paths:
  # TODO: ƒê·ªãnh nghƒ©a c√°c paths (endpoints) cho service c·ªßa b·∫°n.
  # D∆∞·ªõi ƒë√¢y l√† v√≠ d·ª• d·ª±a tr√™n User Service Sub.

  /resource-group-1/items: # TODO: Thay th·∫ø b·∫±ng path th·ª±c t·∫ø, v√≠ d·ª•: /users
    get:
      tags:
        - resource-group-1 # TODO: S·ª≠ d·ª•ng tag ƒë√£ ƒë·ªãnh nghƒ©a ·ªü tr√™n.
      summary: "L·∫•y danh s√°ch c√°c [items] c·ªßa [resource-group-1]" # TODO: M√¥ t·∫£ ng·∫Øn g·ªçn.
      description: |
        # TODO: M√¥ t·∫£ chi ti·∫øt h∆°n v·ªÅ API n√†y.
        # - M·ª•c ƒë√≠ch.
        # - C√°c tham s·ªë query h·ªó tr·ª£ (pagination, filtering, sorting).
        # - C√°c tr∆∞·ªùng h·ª£p ƒë·∫∑c bi·ªát.
      operationId: "listMyItems" # TODO: (T√πy ch·ªçn) ID duy nh·∫•t cho operation, h·ªØu √≠ch cho code generation.
      x-required-permission: "resource.read" # TODO: Khai b√°o permission c·∫ßn thi·∫øt (n·∫øu c√≥).
      parameters: # Danh s√°ch c√°c tham s·ªë.
        - $ref: '#/components/parameters/AuthorizationHeader' # Tham chi·∫øu header Authorization.
        # - $ref: '#/components/parameters/PageParam' # Tham chi·∫øu tham s·ªë page (n·∫øu c√≥).
        # - $ref: '#/components/parameters/LimitParam' # Tham chi·∫øu tham s·ªë limit (n·∫øu c√≥).
        - name: search # V√≠ d·ª• tham s·ªë t√¨m ki·∫øm.
          in: query
          description: "T·ª´ kh√≥a t√¨m ki·∫øm cho [items]."
          required: false
          schema:
            type: string
            example: "t√™n m·∫´u"
        # TODO: Th√™m c√°c tham s·ªë filter v√† sort kh√°c n·∫øu c·∫ßn.
      responses:
        '200': # HTTP Status Code
          description: "Danh s√°ch [items] ƒë∆∞·ª£c tr·∫£ v·ªÅ th√†nh c√¥ng." # M√¥ t·∫£ response.
          headers: # Khai b√°o response headers (n·∫øu c√≥).
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          content:
            application/json: # Content type.
              schema:
                $ref: '#/components/schemas/MyEntityListResponse' # Tham chi·∫øu ƒë·∫øn schema c·ªßa response.
        '401': # L·ªói Unauthorized.
          $ref: '#/components/responses/UnauthorizedError' # Tham chi·∫øu ƒë·∫øn global response l·ªói.
        '403': # L·ªói Forbidden.
          $ref: '#/components/responses/ForbiddenError'
        '500': # L·ªói Internal Server.
          $ref: '#/components/responses/InternalServerError'
  # TODO: Th√™m c√°c paths v√† operations kh√°c cho service c·ªßa b·∫°n.
  # V√≠ d·ª• c√°c API t·ª´ User Service Sub:
  # /users:
  #   get: ...
  # /users/me:
  #   get: ...
  # /users/me/permissions:
  #   get: ...
  # /roles:
  #   get: ...
  # /permissions:
  #   get: ...