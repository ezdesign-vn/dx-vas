# =================================================================================================
# 📘 OpenAPI Specification TEMPLATE - Tiêu Chuẩn 5★ Toàn Diện cho Service DX-VAS
# =================================================================================================
# Phiên bản Template: 2.0
# Dựa trên: openapi.yaml (Master v1.2.0)
#
# LỜI MỞ ĐẦU TỪ BILL (CTO):
#   Chào các bạn, đây là template được chắt lọc từ những thực hành tốt nhất và các tiêu chuẩn
#   đã được thống nhất cho dự án dx-vas. Mục tiêu của template này là giúp các bạn:
#     1. Tạo ra các đặc tả API nhất quán, rõ ràng, và đầy đủ.
#     2. Đảm bảo tuân thủ các ADRs quan trọng của hệ thống.
#     3. Giảm thiểu thời gian tìm hiểu và tăng tốc độ phát triển.
#     4. Tạo điều kiện thuận lợi cho việc tự động hóa (sinh code, tài liệu, kiểm thử).
#
# HƯỚNG DẪN SỬ DỤNG CHUNG:
#   - Sao chép file này và đổi tên thành openapi.yaml cho service mới của bạn.
#   - Tìm và thay thế tất cả các placeholder có dạng "[PLACEHOLDER_...]"
#     hoặc làm theo các hướng dẫn trong comment "TODO: ..."
#   - Hãy đọc kỹ các lý giải và hướng dẫn đi kèm để hiểu rõ mục đích của từng phần.
#   - Xóa các comment hướng dẫn không cần thiết sau khi đã hoàn thiện file của bạn.
#   - Luôn nhớ rằng, một đặc tả API tốt là nền tảng cho một service tốt!
# =================================================================================================

openapi: 3.0.3
# LÝ GIẢI:
#   - `openapi: 3.0.3` là phiên bản của OpenAPI Specification mà chúng ta đang sử dụng.
#     Việc thống nhất phiên bản giúp đảm bảo tính tương thích của các công cụ (linters, code generators, UI renderers).
#   - Khuyến khích giữ nguyên phiên bản này trừ khi có quyết định thay đổi trên toàn hệ thống.

info:
  # LÝ GIẢI:
  #   Khối `info` cung cấp metadata tổng quan về API của bạn.
  #   Đây là thông tin quan trọng giúp người đọc hiểu về API ngay từ cái nhìn đầu tiên.
  title: "[SERVICE_NAME] – API Spec" # TODO: Thay [SERVICE_NAME] bằng tên service cụ thể. Ví dụ: "Order Service – API Spec", "Notification Service Sub – API Spec".
  version: "1.0.0" # TODO: Đây là phiên bản SEMANTIC VERSIONING (Major.Minor.Patch) của chính API service này, KHÔNG phải phiên bản của file OpenAPI. Bắt đầu với 1.0.0 cho bản public đầu tiên, hoặc 0.1.0 cho bản beta/internal.
  description: |
    # TODO: Cung cấp một mô tả chi tiết, súc tích và hữu ích về service và các API của nó.
    #   - Mục đích chính của service này là gì? Nó giải quyết bài toán nào?
    #   - Các nhóm chức năng chính mà API cung cấp.
    #   - Nhấn mạnh các nguyên tắc thiết kế chính mà service này tuân thủ (ví dụ: read-only, event-driven, stateless).
    #   - Rất quan trọng: Luôn tham chiếu đến các ADRs của hệ thống dx-vas mà service này tuân thủ.
    #     Điều này giúp đảm bảo tính nhất quán và dễ dàng tra cứu các quyết định kiến trúc liên quan.
    #   - Cung cấp link đến các tài liệu thiết kế chi tiết khác (design.md, interface-contract.md, data-model.md)
    #     để người đọc có thể tìm hiểu sâu hơn.

    # Ví dụ:
    API cho `[SERVICE_NAME]`, phục vụ [mô tả chức năng chính, ví dụ: quản lý đơn hàng và trạng thái giao hàng].
    Tài liệu này tuân thủ [ADR-012 - Response Structure]([LINK_TO_ADR_012]),
    [ADR-011 - API Error Format]([LINK_TO_ADR_011]),
    và các tiêu chuẩn 5★ cho OpenAPI.
    - 📄 Xem thêm: [design.md](../design.md), [interface-contract.md](../interface-contract.md), [data-model.md](../data-model.md)
  contact:
    # LÝ GIẢI: Thông tin liên hệ giúp người dùng API biết cần hỏi ai khi có vấn đề hoặc cần hỗ trợ.
    name: "[YOUR_TEAM_NAME_OR_CONTACT_PERSON]" # TODO: Tên đội ngũ phát triển/chủ sở hữu API hoặc người liên hệ chính.
    email: "[your_team_email@example.com]" # TODO: Email liên hệ của đội ngũ.

  # --- Custom Extensions (x-prefixed) for API Governance & Metadata ---
  # LÝ GIẢI:
  #   Các custom extension (tiền tố `x-`) rất hữu ích để bổ sung metadata không được chuẩn OpenAPI định nghĩa sẵn.
  #   Chúng giúp cho việc quản trị API, theo dõi tuân thủ, và tự động hóa trở nên dễ dàng hơn.
  x-api-version: "v1" # TODO: Phiên bản nghiệp vụ của API (khác với info.version). Ví dụ: v1, v2. Thường dùng cho versioning API qua URL.
  x-last-updated: "YYYY-MM-DD" # TODO: Ngày cập nhật cuối cùng của file spec này. Giúp theo dõi lịch sử thay đổi.
  x-author: "[Your Name/Team]" # TODO: Tác giả của file spec này.
  x-reviewed-by: "[Reviewer Name/Team]" # TODO: Người hoặc đội ngũ đã review file spec này.
  x-maintainer: "[maintainer_email@example.com]" # TODO: Email của người hoặc đội ngũ chịu trách nhiệm bảo trì API này.
  x-purpose: | # TODO: Mô tả mục đích chính của API này một cách ngắn gọn (1-2 dòng).
    Cung cấp các API để [mô tả mục đích chính, ví dụ: quản lý vòng đời đơn hàng từ lúc tạo đến khi hoàn thành].
  x-adr-compliance: # TODO: Liệt kê các mã ADRs chính mà API này tuân thủ. Điều này rất quan trọng cho việc kiểm tra và đảm bảo chất lượng kiến trúc.
    - adr-009-api-governance # Ví dụ
    - adr-011-api-error-format
    - adr-012-response-structure
    - adr-013-path-naming-convention
    # - adr-xxx (các ADR khác liên quan trực tiếp đến service này)

externalDocs:
  # LÝ GIẢI: Nếu có tài liệu bên ngoài (wiki, GitHub pages, Confluence) mô tả chi tiết hơn về service,
  # các luồng nghiệp vụ, hoặc hướng dẫn sử dụng API, hãy liên kết ở đây.
  description: "[DESCRIPTION_OF_EXTERNAL_DOCS]" # TODO: Mô tả ngắn về tài liệu bên ngoài.
  url: "[URL_TO_EXTERNAL_DOCS]" # TODO: URL đến tài liệu đó.

servers:
  # LÝ GIẢI:
  #   Khai báo URL cơ sở (base URLs) cho API của bạn ở các môi trường khác nhau.
  #   Client sẽ sử dụng các URL này để gửi request.
  #   Nên có ít nhất cho Production. Staging và Development là tùy chọn nhưng rất khuyến khích.
  - url: "https://api.truongvietanh.edu.vn/[service-path-prod]" # TODO: Thay [service-path-prod] bằng đường dẫn cụ thể của service trên Production.
    description: Production Server
  - url: "https://staging-api.truongvietanh.edu.vn/[service-path-staging]" # TODO: Thay [service-path-staging] bằng đường dẫn cụ thể của service trên Staging.
    description: Staging Server
  # - url: "http://localhost:[YOUR_SERVICE_PORT]/[service-path-dev]" # TODO: (Tùy chọn) Cho môi trường phát triển local.
  #   description: Local Development Environment

tags:
  # LÝ GIẢI:
  #   Tags dùng để nhóm các API operations (endpoints) một cách logic.
  #   Mỗi operation nên được gán ít nhất một tag. Điều này giúp tài liệu API (ví dụ Swagger UI)
  #   trở nên dễ điều hướng và có tổ chức hơn.
  # TODO: Định nghĩa các tags phù hợp với các nhóm tài nguyên hoặc chức năng chính của service bạn.
  - name: "[resource-group-1]" # Ví dụ: users, products, orders
    description: "Mô tả về nhóm API [resource-group-1]. Ví dụ: Các API liên quan đến quản lý người dùng."
  - name: "[resource-group-2]"
    description: "Mô tả về nhóm API [resource-group-2]."
  # - name: "utils" # Ví dụ tag cho các API tiện ích, health check.
  #   description: "Các API tiện ích và kiểm tra trạng thái hệ thống."

security:
  # LÝ GIẢI:
  #   Khai báo cơ chế bảo mật (security scheme) được áp dụng mặc định cho TẤT CẢ các API trong file này.
  #   Nếu một API cụ thể không cần xác thực hoặc dùng cơ chế khác, bạn có thể override ở mức operation đó
  #   bằng cách khai báo `security: []` (không cần xác thực) hoặc `security: - AnotherAuth: []`.
  # TODO: Chọn và cấu hình security scheme phù hợp. `BearerAuth` (JWT) là phổ biến.
  - BearerAuth: [] # Giả sử BearerAuth (JWT) là cơ chế mặc định.

components:
  # LÝ GIẢI:
  #   `components` là nơi bạn định nghĩa các đối tượng có thể tái sử dụng trong toàn bộ đặc tả OpenAPI,
  #   bao gồm: securitySchemes, parameters, headers, schemas, responses, examples, requestBodies, links, callbacks.
  #   Việc sử dụng `components` giúp đặc tả của bạn ngắn gọn, dễ bảo trì và nhất quán.

  securitySchemes:
    # LÝ GIẢI: Định nghĩa các cơ chế xác thực mà API của bạn hỗ trợ.
    # TODO: Định nghĩa security scheme phù hợp. `BearerAuth` cho JWT là một ví dụ.
    BearerAuth: # Tên này ("BearerAuth") sẽ được tham chiếu trong `security` global hoặc operation.
      type: http
      scheme: bearer # Cho biết đây là Bearer token authentication.
      bearerFormat: JWT # Thông tin bổ sung cho biết token là JWT.
      description: |
        Xác thực bằng JWT Bearer token.
        Client cần gửi header `Authorization: Bearer <your_jwt_token>`.
        Token này thường được nhận sau khi người dùng đăng nhập thành công qua Auth Service.

  headers:
    # LÝ GIẢI: Định nghĩa các HTTP response headers thường dùng để có thể tái sử dụng.
    # TODO: Thêm các response headers chuẩn mà service của bạn trả về.
    X-Request-ID:
      description: "ID định danh duy nhất được gán cho mỗi request, rất quan trọng cho việc tracing và debugging xuyên suốt các service."
      required: false # Mặc dù quan trọng, nhưng có thể không phải lúc nào client cũng cần 'biết' về nó để khai báo là required.
      schema:
        type: string
        format: uuid # Hoặc một format khác nếu bạn có quy ước riêng.
      example: "req_01H8X4YJ4GVN3YX4MH6ZQ1M3Q0" # Ví dụ một request ID.
    # X-RateLimit-Limit:
    #   description: "Số lượng request tối đa được phép trong một khoảng thời gian (ví dụ: 1 phút)."
    #   schema: { type: integer }
    # X-RateLimit-Remaining:
    #   description: "Số lượng request còn lại client có thể thực hiện trong khoảng thời gian hiện tại."
    #   schema: { type: integer }
    # X-RateLimit-Reset:
    #   description: "Thời gian (tính bằng giây) còn lại cho đến khi giới hạn rate limit được reset."
    #   schema: { type: integer }

  parameters:
    # LÝ GIẢI: Định nghĩa các HTTP request parameters (query, path, header, cookie) thường dùng để tái sử dụng.
    # TODO: Định nghĩa các parameters chuẩn cho service của bạn, đặc biệt là các tham số cho pagination, filtering, sorting.
    AuthorizationHeader: # Tên này được dùng để tham chiếu bằng $ref.
      name: Authorization # Tên header thực tế mà client gửi.
      in: header # Vị trí của parameter (query, header, path, cookie).
      required: true # Parameter này là bắt buộc.
      schema:
        type: string # Kiểu dữ liệu của parameter.
      description: "Bearer JWT token (format: 'Bearer <access_token>'). Token này nhận được sau khi người dùng đăng nhập thành công."
      example: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

    PageParam: # Ví dụ cho pagination
      name: page
      in: query
      required: false # Thường thì optional, có giá trị mặc định.
      schema:
        type: integer
        minimum: 1 # Trang bắt đầu từ 1.
        default: 1
      description: "Số trang hiện tại cho kết quả phân trang (bắt đầu từ 1, mặc định là 1)."
      example: 1

    LimitParam: # Ví dụ cho pagination
      name: limit
      in: query
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 100 # Nên có giới hạn maximum để bảo vệ hệ thống.
        default: 20
      description: "Số lượng bản ghi tối đa trả về trên mỗi trang (mặc định là 20, tối đa 100)."
      example: 20

    SearchKeywordParam: # Ví dụ cho filtering
      name: search
      in: query
      required: false
      schema:
        type: string
        minLength: 1 # (Tùy chọn)
      description: "Từ khóa tìm kiếm chung cho các trường văn bản (ví dụ: tên, mô tả, email)."
      example: "từ khóa mẫu"

    SortOrderParam: # Ví dụ cho sorting
      name: sort_order
      in: query
      required: false
      schema:
        $ref: '#/components/schemas/SortOrderEnum' # Tham chiếu đến ENUM đã định nghĩa.
        default: "desc" # (Tùy chọn) Giá trị mặc định.
      description: "Thứ tự sắp xếp (tăng hoặc giảm dần). Mặc định là 'desc' (mới nhất trước)."

    # TODO: Định nghĩa các SortByEnum cụ thể cho từng loại tài nguyên có thể sắp xếp.
    # Ví dụ:
    # MyResourceSortByParam:
    #   name: sort_by
    #   in: query
    #   required: false
    #   schema:
    #     $ref: '#/components/schemas/MyResourceSortByEnum' # Tham chiếu đến ENUM sort_by cho MyResource.
    #     default: "created_at" # (Tùy chọn) Trường sắp xếp mặc định.
    #   description: "Trường dữ liệu dùng để sắp xếp danh sách [MyResource]."

  schemas:
    # LÝ GIẢI:
    #   Đây là nơi bạn định nghĩa tất cả các cấu trúc dữ liệu (schemas) được sử dụng trong API
    #   (cho request bodies, response bodies, parameters).
    #   Việc định nghĩa tập trung giúp tái sử dụng, nhất quán và dễ quản lý.

    # === Generic Schemas - Các schema này nên được chuẩn hóa và tái sử dụng trên toàn hệ thống dx-vas ===
    ResponseMeta:
      type: object
      required: # Các trường luôn phải có trong metadata.
        - request_id
        - timestamp
      properties:
        request_id:
          type: string
          format: uuid # Hoặc một định dạng ID chuẩn khác.
          description: "Mã định danh duy nhất của request, giúp liên kết log và trace xuyên suốt các service."
          example: "7e8f7f34-b12a-4d8c-b32f-6db7d326f7d2"
        timestamp:
          type: string
          format: date-time # Chuẩn ISO 8601 (ví dụ: 2025-06-02T14:30:00Z).
          description: "Thời gian (UTC) server xử lý và trả về response."
          example: "2025-06-02T14:30:00Z"
        # --- Các trường sau dùng cho pagination, chỉ xuất hiện khi API trả về danh sách ---
        page:
          type: integer
          nullable: true # Cho phép null nếu API không phân trang hoặc đây là trang cuối cùng không có dữ liệu.
          description: "Số trang hiện tại của kết quả (nếu có phân trang và `total_items` > 0)."
          example: 1
        per_page:
          type: integer
          nullable: true
          description: "Số lượng bản ghi trên mỗi trang (nếu có phân trang)."
          example: 20
        total_items: # Sử dụng total_items để rõ ràng hơn là tổng số bản ghi khớp.
          type: integer
          nullable: true
          description: "Tổng số bản ghi khớp với truy vấn (nếu có phân trang)."
          example: 125
        total_pages: # Trường tính toán, rất hữu ích cho client xây dựng UI phân trang.
          type: integer
          nullable: true
          description: "Tổng số trang dựa trên `total_items` và `per_page` (nếu có phân trang)."
          example: 7
      description: "Metadata chung cho mọi API response, tuân thủ ADR-012. Bao gồm thông tin về request và pagination (nếu có)."

    ErrorEnvelope: # Cấu trúc bao ngoài cho lỗi, tuân thủ ADR-012.
      type: object
      required: # `meta` và `error` là bắt buộc khi có lỗi.
        - meta
        - error
      properties:
        meta:
          $ref: '#/components/schemas/ResponseMeta' # Luôn có meta, kể cả khi lỗi.
        error:
          $ref: '#/components/schemas/ErrorResponse' # Chi tiết lỗi.
        data: # Theo ADR-012, khi có lỗi thì data thường là null.
          type: object
          nullable: true
          description: "Thường là null khi có lỗi."
          example: null
      description: "Cấu trúc chuẩn cho response lỗi, bao gồm metadata và chi tiết lỗi. Trường `data` thường là `null`."
      example:
        meta:
          request_id: "req-err-123"
          timestamp: "2025-06-02T14:35:00Z"
        error:
          code: "VALIDATION_ERROR"
          message: "Dữ liệu đầu vào không hợp lệ."
          details: [{ "field": "email", "issue": "Địa chỉ email không đúng định dạng." }]
        data: null

    ErrorResponse: # Chi tiết lỗi, tuân thủ ADR-011.
      type: object
      required: # `code` và `message` là bắt buộc cho một lỗi.
        - code
        - message
      properties:
        code:
          type: string
          description: "Mã lỗi ứng dụng (application-specific error code). Giúp client xử lý lỗi một cách lập trình. Nên sử dụng các mã lỗi đã được chuẩn hóa trong hệ thống."
          example: "RESOURCE_NOT_FOUND" # Ví dụ: USER_NOT_FOUND, INVALID_INPUT, FORBIDDEN_ACCESS.
        message:
          type: string
          description: "Mô tả lỗi thân thiện với người dùng hoặc developer. Có thể được hiển thị trên UI hoặc ghi vào log chi tiết."
          example: "Không tìm thấy tài nguyên được yêu cầu."
        details:
          # LÝ GIẢI: 'details' là tùy chọn, dùng để cung cấp thông tin cụ thể hơn về lỗi.
          #   Có thể là một object với các trường tùy ý, hoặc một mảng các object (ví dụ cho lỗi validation nhiều trường).
          #   Nên thống nhất cấu trúc của 'details' nếu có thể.
          type: object # Hoặc `type: array` với `items: type: object`
          nullable: true
          description: "Thông tin chi tiết bổ sung về lỗi, ví dụ: trường nào bị lỗi validation, giá trị không hợp lệ là gì. (Tùy chọn)"
          example: { "resource_id": "some-id-123", "reason": "Không tìm thấy trong cơ sở dữ liệu." }
          # Ví dụ khác cho validation error (array of objects):
          # example:
          #   - field: "email"
          #     issue: "Địa chỉ email không đúng định dạng."
          #     value: "invalid-email"
          #   - field: "age"
          #     issue: "Tuổi phải là số dương."
          #     value: -5
      description: "Cấu trúc chi tiết của một lỗi ứng dụng, bao gồm mã lỗi, thông điệp và các chi tiết bổ sung (nếu có)."

    # --- ENUM Schemas - Định nghĩa các ENUM dùng chung cho service này ---
    # LÝ GIẢI: Định nghĩa ENUM tập trung giúp dễ quản lý, tái sử dụng và đảm bảo tính nhất quán.
    # TODO: Thêm các ENUM cụ thể cho service của bạn.
    SortOrderEnum: # Ví dụ: ENUM cho thứ tự sắp xếp.
      type: string
      description: "Thứ tự sắp xếp: 'asc' (tăng dần) hoặc 'desc' (giảm dần)."
      enum: [asc, desc]
      example: "desc"

    # TODO: Thêm các ENUM khác như [MyResource]StatusEnum, [MyResource]SortByEnum, AuthProviderEnum (nếu service có liên quan đến user)...
    # Ví dụ:
    # OrderStatusEnum:
    #   type: string
    #   description: "Trạng thái của một đơn hàng."
    #   enum: [pending, processing, shipped, delivered, cancelled, refunded]
    #   example: "processing"
    # MyResourceSortByEnum:
    #   type: string
    #   description: "Các trường có thể dùng để sắp xếp danh sách [MyResource]."
    #   enum: [created_at, name, last_updated_at] # TODO: Thay bằng các trường thực tế.
    #   example: "created_at"

    # === Entity Schemas - Định nghĩa các đối tượng dữ liệu chính của service ===
    # LÝ GIẢI:
    #   - Nên có schema riêng cho Request (ví dụ: MyEntityCreateRequest, MyEntityUpdateRequest)
    #     và Response (ví dụ: MyEntityResponse). Điều này giúp kiểm soát các trường readOnly, writeOnly
    #     và các trường bắt buộc một cách linh hoạt.
    #   - Các schema Response cho một đối tượng đơn lẻ nên được bọc trong một "Envelope"
    #     để tuân thủ ADR-012 (có data, meta, error).
    #   - Các schema Response cho danh sách nên dùng cấu trúc "Paginated" (có data là array và meta chứa thông tin pagination).

    # --- Schemas cho [RESOURCE_NAME_1] ---
    # TODO: Thay thế [RESOURCE_NAME_1] bằng tên tài nguyên thực tế (ví dụ: UserGlobal, Tenant).

    [RESOURCE_NAME_1]Response: # Schema cho đối tượng [RESOURCE_NAME_1] khi trả về trong response.
      type: object
      description: "Thông tin chi tiết của [RESOURCE_NAME_1]."
      # TODO: Liệt kê các trường bắt buộc cho response (nếu có).
      # required:
      #   - id
      #   - name
      properties:
        # TODO: Định nghĩa các thuộc tính của [RESOURCE_NAME_1].
        id:
          type: string
          format: uuid # Hoặc integer, string tùy theo định nghĩa ID.
          description: "ID duy nhất của [RESOURCE_NAME_1]."
          example: "123e4567-e89b-12d3-a456-426614174000"
          readOnly: true # ID thường do server sinh ra và không cho client thay đổi.
        name:
          type: string
          description: "Tên của [RESOURCE_NAME_1]."
          example: "Tên tài nguyên mẫu"
        description:
          type: string
          nullable: true # Cho phép trường này có giá trị null.
          description: "Mô tả chi tiết hơn về [RESOURCE_NAME_1]."
          example: "Đây là mô tả chi tiết cho tài nguyên mẫu."
        # TODO: Thêm các trường khác như status (tham chiếu ENUM), timestamps, v.v.
        # Ví dụ:
        # status:
        #   $ref: '#/components/schemas/[MyResource]StatusEnum'
        created_at:
          type: string
          format: date-time
          description: "Thời gian tạo tài nguyên (UTC)."
          readOnly: true
          example: "2025-06-01T12:00:00Z"
        updated_at:
          type: string
          format: date-time
          description: "Thời gian cập nhật cuối cùng của tài nguyên (UTC)."
          readOnly: true
          example: "2025-06-02T09:30:00Z"

    [RESOURCE_NAME_1]CreateRequest: # Schema cho request body khi tạo mới [RESOURCE_NAME_1].
      type: object
      description: "Dữ liệu cần thiết để tạo mới một [RESOURCE_NAME_1]."
      # TODO: Liệt kê các trường bắt buộc khi tạo mới.
      required:
        - name
        # - other_required_field
      properties:
        # TODO: Định nghĩa các thuộc tính cho phép client gửi lên khi tạo.
        # Không bao gồm các trường readOnly như id, created_at, updated_at.
        name:
          type: string
          description: "Tên của [RESOURCE_NAME_1]."
          example: "Tên tài nguyên mới"
          minLength: 3 # (Tùy chọn) Ví dụ ràng buộc.
          maxLength: 100
        description:
          type: string
          nullable: true
          description: "Mô tả chi tiết hơn về [RESOURCE_NAME_1]."
          example: "Mô tả cho tài nguyên mới."
        # TODO: Thêm các trường khác.

    [RESOURCE_NAME_1]UpdateRequest: # Schema cho request body khi cập nhật [RESOURCE_NAME_1].
      type: object
      description: "Dữ liệu cho phép cập nhật cho một [RESOURCE_NAME_1] đã tồn tại. Tất cả các trường thường là tùy chọn (PATCH)."
      properties:
        # TODO: Định nghĩa các thuộc tính cho phép client gửi lên khi cập nhật.
        # Các trường ở đây thường không có `required` (cho phép cập nhật từng phần).
        name:
          type: string
          description: "Tên mới của [RESOURCE_NAME_1]."
          example: "Tên tài nguyên đã cập nhật"
        description:
          type: string
          nullable: true
          description: "Mô tả mới cho [RESOURCE_NAME_1]."
          example: "Mô tả đã được cập nhật."
        # TODO: Thêm các trường khác có thể cập nhật.

    # --- Envelope Schemas (Tuân thủ ADR-012) ---
    [RESOURCE_NAME_1]Envelope: # Schema bao bọc cho response trả về một [RESOURCE_NAME_1] đơn lẻ.
      type: object
      description: "Cấu trúc response chuẩn khi trả về một [RESOURCE_NAME_1] đơn lẻ."
      required: [data, meta] # `error` sẽ là null trong trường hợp thành công.
      properties:
        data:
          $ref: '#/components/schemas/[RESOURCE_NAME_1]Response' # Tham chiếu đến schema của đối tượng dữ liệu.
        meta:
          $ref: '#/components/schemas/ResponseMeta'
        error: # Luôn có trường error, nhưng giá trị là null nếu thành công.
          type: object
          nullable: true
          description: "Sẽ là `null` nếu request thành công."
          example: null # Minh họa trường hợp thành công.
      example: # Ví dụ cho một response thành công hoàn chỉnh.
        data:
          id: "123e4567-e89b-12d3-a456-426614174000"
          name: "Tên tài nguyên mẫu"
          description: "Đây là mô tả chi tiết cho tài nguyên mẫu."
          created_at: "2025-06-01T12:00:00Z"
          updated_at: "2025-06-02T09:30:00Z"
        meta:
          request_id: "req-single-item-123"
          timestamp: "2025-06-02T09:31:00Z"
        error: null

    Paginated[RESOURCE_NAME_1]s: # Schema bao bọc cho response trả về danh sách [RESOURCE_NAME_1] có phân trang.
      type: object
      description: "Cấu trúc response chuẩn khi trả về danh sách [RESOURCE_NAME_1] có phân trang."
      required: [data, meta] # `error` sẽ là null trong trường hợp thành công.
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/[RESOURCE_NAME_1]Response' # Mảng các đối tượng dữ liệu.
          description: "Danh sách các [RESOURCE_NAME_1]."
        meta:
          $ref: '#/components/schemas/ResponseMeta' # Meta chứa thông tin pagination.
        error: # Luôn có trường error, nhưng giá trị là null nếu thành công.
          type: object
          nullable: true
          description: "Sẽ là `null` nếu request thành công."
          example: null # Minh họa trường hợp thành công.
      example: # Ví dụ cho một response danh sách thành công hoàn chỉnh.
        data:
          - id: "123e4567-e89b-12d3-a456-426614174000"
            name: "Tài nguyên mẫu 1"
            created_at: "2025-06-01T12:00:00Z"
            updated_at: "2025-06-02T09:30:00Z"
          - id: "987e6543-e21b-32d1-b098-987654321000"
            name: "Tài nguyên mẫu 2"
            created_at: "2025-06-02T10:00:00Z"
            updated_at: "2025-06-02T11:00:00Z"
        meta:
          request_id: "req-list-items-456"
          timestamp: "2025-06-02T11:01:00Z"
          page: 1
          per_page: 2
          total_items: 2
          total_pages: 1
        error: null

    # TODO: Lặp lại việc định nghĩa các schema ...Response, ...CreateRequest, ...UpdateRequest, ...Envelope, Paginated...
    # cho các tài nguyên khác của service bạn (ví dụ: [RESOURCE_NAME_2], [RESOURCE_NAME_3], ...).

  responses: # TODO: Định nghĩa các global responses để tái sử dụng (ví dụ: các lỗi chung).
    # LÝ GIẢI: Định nghĩa các response lỗi chung ở đây giúp bạn dễ dàng tham chiếu `$ref`
    # trong phần `responses` của từng operation, đảm bảo tính nhất quán.
    BadRequestError: # Tên này được dùng để tham chiếu bằng $ref.
      description: "Lỗi Yêu cầu không hợp lệ (Bad Request - 400). Dữ liệu đầu vào từ client không đúng định dạng, thiếu thông tin bắt buộc, hoặc vi phạm các ràng buộc nghiệp vụ."
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorEnvelope' # Luôn dùng ErrorEnvelope chuẩn.
            example: # Ví dụ cụ thể cho lỗi BadRequest
              meta:
                request_id: "req-badreq-123"
                timestamp: "2025-06-02T14:40:00Z"
              error:
                code: "INVALID_INPUT"
                message: "Dữ liệu đầu vào không hợp lệ."
                details: [{ "field": "email", "issue": "Địa chỉ email không đúng định dạng." }]
              data: null

    UnauthorizedError:
      description: "Lỗi Chưa xác thực (Unauthorized - 401). Client chưa cung cấp thông tin xác thực hợp lệ (ví dụ: thiếu JWT, JWT sai hoặc hết hạn)."
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorEnvelope'
            example:
              meta:
                request_id: "req-unauth-456"
                timestamp: "2025-06-02T14:45:00Z"
              error:
                code: "UNAUTHENTICATED"
                message: "Yêu cầu cần thông tin xác thực."
              data: null

    ForbiddenError:
      description: "Lỗi Không có quyền (Forbidden - 403). Client đã xác thực thành công nhưng không có đủ quyền để truy cập tài nguyên hoặc thực hiện hành động này."
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorEnvelope'
            example:
              meta:
                request_id: "req-forbid-789"
                timestamp: "2025-06-02T14:50:00Z"
              error:
                code: "FORBIDDEN_ACCESS"
                message: "Không có quyền thực hiện hành động này."
              data: null

    NotFoundError:
      description: "Lỗi Không tìm thấy (Not Found - 404). Tài nguyên được yêu cầu không tồn tại trên server."
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorEnvelope'
            example:
              meta:
                request_id: "req-notfound-012"
                timestamp: "2025-06-02T14:55:00Z"
              error:
                code: "RESOURCE_NOT_FOUND"
                message: "Không tìm thấy tài nguyên bạn yêu cầu."
                details: { "resource_type": "[ResourceType]", "resource_id": "[specific_id]" }
              data: null

    ConflictError:
      description: "Lỗi Xung đột (Conflict - 409). Yêu cầu không thể được xử lý do xung đột với trạng thái hiện tại của tài nguyên (ví dụ: cố gắng tạo một tài nguyên đã tồn tại với ID duy nhất, hoặc một hành động vi phạm ràng buộc nghiệp vụ)."
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorEnvelope'
            example:
              meta:
                request_id: "req-conflict-345"
                timestamp: "2025-06-02T15:00:00Z"
              error:
                code: "RESOURCE_CONFLICT"
                message: "Tài nguyên đã tồn tại hoặc có xung đột dữ liệu."
                details: { "conflicting_field": "email", "value": "user@example.com" }
              data: null

    InternalServerError:
      description: "Lỗi Hệ thống Nội bộ (Internal Server Error - 500). Một lỗi không mong muốn đã xảy ra ở phía server. Client không nên thử lại ngay lập tức mà không có thay đổi."
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorEnvelope'
            example:
              meta:
                request_id: "req-servererr-678"
                timestamp: "2025-06-02T15:05:00Z"
              error:
                code: "INTERNAL_SERVER_ERROR"
                message: "Đã có lỗi xảy ra ở phía máy chủ. Vui lòng thử lại sau."
              data: null

# ===================================================================
#  Paths - Định nghĩa các API endpoints
# ===================================================================
paths:
  # --- API Group for [RESOURCE_NAME_1] ---
  # TODO: Thay thế bằng path thực tế của bạn, ví dụ: /users, /orders
  /[resource-collection-name]:
    get:
      tags:
        - "[resource-group-1]" # TODO: Sử dụng tag đã định nghĩa.
      summary: "Lấy danh sách các [RESOURCE_NAME_1]" # TODO: Mô tả ngắn gọn, ví dụ: Lấy danh sách người dùng.
      description: |
        # TODO: Mô tả chi tiết hơn về API này.
        # - Mục đích chính của API.
        # - Cách sử dụng các tham số query (pagination, filtering, sorting).
        # - Các trường hợp đặc biệt hoặc lưu ý.
        Trả về danh sách các `[RESOURCE_NAME_1]` có phân trang, hỗ trợ tìm kiếm và sắp xếp.
      operationId: "list[ResourceName1]s" # TODO: (Tùy chọn) ID duy nhất cho operation, hữu ích cho code generation. Ví dụ: listUsers, getOrderById.
      x-required-permission: "[scope].read.[resource]" # TODO: Khai báo permission cần thiết (nếu có). Ví dụ: superadmin.view_all_users.
      x-audit-action: "list_[resource_name_1]s" # TODO: (Tùy chọn) Hành động audit tương ứng.
      parameters: # Danh sách các tham số cho operation này.
        - $ref: '#/components/parameters/AuthorizationHeader' # Luôn cần nếu API yêu cầu xác thực.
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - $ref: '#/components/parameters/SearchKeywordParam' # (Tùy chọn)
        # - $ref: '#/components/parameters/MyResourceSortByParam' # (Tùy chọn) Tham chiếu đến SortByParam cụ thể.
        - $ref: '#/components/parameters/SortOrderParam' # (Tùy chọn)
        # TODO: Thêm các tham số query filter cụ thể khác nếu cần.
        # - name: status
        #   in: query
        #   description: "Lọc theo trạng thái của [RESOURCE_NAME_1]."
        #   required: false
        #   schema:
        #     $ref: '#/components/schemas/[MyResource]StatusEnum'
      responses:
        '200': # HTTP Status Code cho thành công.
          description: "Danh sách [RESOURCE_NAME_1] được trả về thành công." # Mô tả response.
          headers: # Khai báo các response headers (nếu có).
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID' # Tham chiếu đến header đã định nghĩa.
          content:
            application/json: # Content type của response.
              schema:
                $ref: '#/components/schemas/Paginated[RESOURCE_NAME_1]s' # Tham chiếu đến schema của response body.
        # TODO: Tham chiếu đến các global error responses đã định nghĩa.
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags:
        - "[resource-group-1]"
      summary: "Tạo mới một [RESOURCE_NAME_1]"
      description: |
        # TODO: Mô tả chi tiết hơn về API tạo mới này.
        # - Các ràng buộc đầu vào quan trọng.
        # - Hành vi của hệ thống sau khi tạo thành công (ví dụ: sự kiện được phát ra).
        Tạo mới một `[RESOURCE_NAME_1]`. Trả về thông tin của tài nguyên vừa được tạo.
      operationId: "create[ResourceName1]"
      x-required-permission: "[scope].create.[resource]" # TODO: Permission để tạo.
      x-audit-action: "create_[resource_name_1]" # TODO: Hành động audit.
      x-emits-event: "[resource_name_1]_created" # TODO: (Tùy chọn) Sự kiện được phát ra.
      parameters:
        - $ref: '#/components/parameters/AuthorizationHeader'
      requestBody:
        description: "Dữ liệu cần thiết để tạo [RESOURCE_NAME_1]."
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/[RESOURCE_NAME_1]CreateRequest' # Tham chiếu đến schema request body.
            example: # Ví dụ cho request body.
              name: "Tên tài nguyên mới"
              description: "Mô tả cho tài nguyên mới."
              # ... (các trường khác)
      responses:
        '201': # HTTP Status Code cho tạo thành công.
          description: "[RESOURCE_NAME_1] được tạo thành công."
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
            Location: # (Tùy chọn) Header Location trỏ đến tài nguyên vừa tạo.
              description: "URL của tài nguyên vừa được tạo."
              schema:
                type: string
                format: url
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/[RESOURCE_NAME_1]Envelope' # Trả về tài nguyên vừa tạo, bọc trong Envelope.
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '409': # (Tùy chọn) Nếu có thể xảy ra xung đột (ví dụ: tạo tài nguyên với ID đã tồn tại).
          $ref: '#/components/responses/ConflictError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /[resource-collection-name]/{resource_id}:
    # LÝ GIẢI:
    #   Đây là path cho các operation liên quan đến một tài nguyên cụ thể,
    #   được xác định bằng `resource_id` (path parameter).
    parameters: # Các path parameters được định nghĩa ở mức path này sẽ áp dụng cho tất cả operations bên dưới.
      - name: resource_id # Tên của path parameter.
        in: path # Vị trí là 'path'.
        required: true # Path parameter luôn là bắt buộc.
        description: "ID duy nhất của [RESOURCE_NAME_1]." # TODO: Mô tả.
        schema:
          type: string # TODO: Kiểu dữ liệu của ID (string, integer, uuid).
          format: uuid # (Tùy chọn) Format cụ thể.
        example: "123e4567-e89b-12d3-a456-426614174000" # TODO: Ví dụ ID.

    get:
      tags:
        - "[resource-group-1]"
      summary: "Lấy thông tin chi tiết của một [RESOURCE_NAME_1]"
      description: |
        # TODO: Mô tả chi tiết.
        Trả về thông tin chi tiết của `[RESOURCE_NAME_1]` dựa trên `resource_id` được cung cấp.
      operationId: "get[ResourceName1]ById"
      x-required-permission: "[scope].read.[resource]" # TODO: Permission để xem.
      x-audit-action: "get_[resource_name_1]_by_id" # TODO: Hành động audit.
      parameters:
        - $ref: '#/components/parameters/AuthorizationHeader'
      responses:
        '200':
          description: "Thông tin chi tiết của [RESOURCE_NAME_1]."
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/[RESOURCE_NAME_1]Envelope' # Trả về tài nguyên, bọc trong Envelope.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404': # (Quan trọng) Trả về 404 nếu không tìm thấy tài nguyên.
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

    patch: # Hoặc PUT nếu bạn muốn cập nhật toàn bộ tài nguyên. PATCH cho cập nhật từng phần.
      tags:
        - "[resource-group-1]"
      summary: "Cập nhật thông tin của một [RESOURCE_NAME_1]"
      description: |
        # TODO: Mô tả chi tiết.
        Cập nhật một phần hoặc toàn bộ thông tin của `[RESOURCE_NAME_1]` đã tồn tại.
        Chỉ các trường được cung cấp trong request body sẽ được cập nhật.
      operationId: "update[ResourceName1]"
      x-required-permission: "[scope].update.[resource]" # TODO: Permission để cập nhật.
      x-audit-action: "update_[resource_name_1]" # TODO: Hành động audit.
      x-emits-event: "[resource_name_1]_updated" # TODO: (Tùy chọn) Sự kiện được phát ra.
      parameters:
        - $ref: '#/components/parameters/AuthorizationHeader'
      requestBody:
        description: "Dữ liệu cần cập nhật cho [RESOURCE_NAME_1]."
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/[RESOURCE_NAME_1]UpdateRequest' # Tham chiếu đến schema request body cho update.
            example: # Ví dụ cho request body.
              description: "Mô tả đã được cập nhật hoàn toàn."
              # ... (các trường khác có thể cập nhật)
      responses:
        '200': # Hoặc '204 No Content' nếu API không trả về nội dung sau khi cập nhật thành công (theo ADR của bạn).
          description: "[RESOURCE_NAME_1] được cập nhật thành công."
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          content:
            application/json: # Nếu trả về đối tượng đã cập nhật.
              schema:
                $ref: '#/components/schemas/[RESOURCE_NAME_1]Envelope' # Trả về tài nguyên đã cập nhật, bọc trong Envelope.
        # '204': # Nếu API không trả về nội dung.
        #   description: "[RESOURCE_NAME_1] được cập nhật thành công. Không có nội dung trả về."
        #   headers:
        #     X-Request-ID:
        #       $ref: '#/components/headers/X-Request-ID'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '409': # (Tùy chọn) Nếu có thể xảy ra xung đột khi cập nhật.
          $ref: '#/components/responses/ConflictError'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags:
        - "[resource-group-1]"
      summary: "Xóa một [RESOURCE_NAME_1]"
      description: |
        # TODO: Mô tả chi tiết.
        # - Hành vi xóa là soft delete hay hard delete? (Tham chiếu ADR-026).
        # - Các tác động phụ (ví dụ: các tài nguyên liên quan có bị xóa theo không?).
        Xóa `[RESOURCE_NAME_1]` dựa trên `resource_id`.
      operationId: "delete[ResourceName1]"
      x-required-permission: "[scope].delete.[resource]" # TODO: Permission để xóa.
      x-audit-action: "delete_[resource_name_1]" # TODO: Hành động audit.
      x-emits-event: "[resource_name_1]_deleted" # TODO: (Tùy chọn) Sự kiện được phát ra.
      parameters:
        - $ref: '#/components/parameters/AuthorizationHeader'
      responses:
        '204': # Thường dùng cho DELETE thành công.
          description: "[RESOURCE_NAME_1] được xóa thành công. Không có nội dung trả về."
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # TODO: Thêm các paths và operations khác cho service của bạn.
  # Ví dụ: Các API đặc thù cho từng resource (ví dụ: /users/{user_id}/activate)
  # /users-global/{user_id}/status:
  #   patch:
  #     summary: Cập nhật trạng thái hoạt động của người dùng toàn cục
  #     ... (như trong file User Service Master đã làm rất tốt)

  # TODO: Nếu service của bạn có các endpoint cho RBAC templates (giống User Service Master)
  # thì có thể tham khảo cấu trúc của User Service Master openapi.yaml.
  # /rbac/templates/roles:
  #   get: ...
  #   post: ...
  # /rbac/templates/roles/{template_id}:
  #   get: ...
  #   patch: ...
  #   delete: ...
  # (Tương tự cho permissions)

# ===================================================================
# Kết thúc Template
# ===================================================================