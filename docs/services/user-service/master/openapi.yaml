openapi: 3.0.3
info:
  title: "User Service Master ‚Äì API Spec"
  version: "1.5.1"
  description: |
    API cho `User Service Master`, ph·ª•c v·ª• cho vi·ªác qu·∫£n l√Ω ng∆∞·ªùi d√πng to√†n c·ª•c,
    ph√¢n quy·ªÅn RBAC theo template, v√† g√°n ng∆∞·ªùi d√πng v√†o c√°c tenant (tr∆∞·ªùng h·ªçc).

    T√†i li·ªáu n√†y tu√¢n th·ªß:
    - [ADR-012 - Response Structure](../ADR/adr-012-response-structure.md)
    - [ADR-011 - API Error Format](../ADR/adr-011-api-error-format.md)
    - [ADR-013 - Path Naming Convention](../ADR/adr-013-path-naming-convention.md)
    - [ADR-030 - Event Schema Governance](../ADR/adr-030-event-schema-governance.md)

    üìÑ Xem th√™m:
    - [design.md](./design.md)
    - [interface-contract.md](./interface-contract.md)
    - [data-model.md](./data-model.md)
  contact:
    name: DX VAS Team
    email: dx@truongvietanh.edu.vn

  x-api-version: "v1"
  x-last-updated: "2025-06-13"
  x-author: "DX VAS Team"
  x-reviewed-by: "Stephen Le"
  x-maintainer: "dx@truongvietanh.edu.vn"
  x-purpose: |
    Cung c·∫•p c√°c API ƒë·ªÉ qu·∫£n l√Ω ng∆∞·ªùi d√πng to√†n c·ª•c, RBAC template, v√† ph√¢n quy·ªÅn theo tenant.
  x-adr-compliance: |
    - ADR-009
    - ADR-011
    - ADR-012
    - ADR-013
    - ADR-030

servers:
  - url: https://api.truongvietanh.edu.vn/user-master/v1
    description: Production Server
  - url: https://staging.truongvietanh.edu.vn/user-master/v1
    description: Staging

tags:
  - name: User Global
    description: API qu·∫£n l√Ω ng∆∞·ªùi d√πng to√†n c·ª•c
  - name: Tenant
    description: API qu·∫£n l√Ω tenant
  - name: Assignment
    description: G√°n ng∆∞·ªùi d√πng v√†o tenant
  - name: RBAC Template
    description: Qu·∫£n l√Ω role/permission template
  - name: Internal Events
    description: S·ª± ki·ªán Pub/Sub ph√°t ra

security:
  - BearerAuth: []

components:

  parameters:
    X-Request-ID:
      name: X-Request-ID
      in: header
      required: true
      description: |
        ID ƒë·ªãnh danh duy nh·∫•t c·ªßa request ‚Äì ƒë∆∞·ª£c t·∫°o b·ªüi API Gateway.  
        T·ª± ƒë·ªông ƒë∆∞·ª£c g·∫Øn v√†o m·ªói request ƒë·ªÉ ph·ª•c v·ª• trace v√† audit.
      schema:
        type: string
        example: "req-34b2fc83-12b8-4efb-9d01-abc123456def"

    EmailQueryParam:
      name: email
      in: query
      required: true
      schema:
        type: string
        format: email
      description: Email ƒëƒÉng nh·∫≠p ng∆∞·ªùi d√πng

    AuthProviderQueryParam:
      name: auth_provider
      in: query
      required: true
      schema:
        $ref: '#/components/schemas/AuthProvider'
      description: Ngu·ªìn x√°c th·ª±c ng∆∞·ªùi d√πng (google, local, otp)

  #___Headers___
  headers:
    X-Request-ID:
      description: |
        M√£ ƒë·ªãnh danh y√™u c·∫ßu duy nh·∫•t, ƒë∆∞·ª£c t·∫°o b·ªüi Gateway ƒë·ªÉ trace to√†n h·ªá th·ªëng.  
        ƒê∆∞·ª£c ph·∫£n h·ªìi l·∫°i ·ªü m·ªçi response ƒë·ªÉ ph·ª•c v·ª• debug, audit, v√† correlate logs.
      schema:
        type: string
        example: "req-34b2fc83-12b8-4efb-9d01-abc123456def"
      required: true

  #___SCHEMAS___
  schemas:
    # üß© Meta wrapper
    ResponseMeta:
      type: object
      description: |
        Metadata ƒëi k√®m m·ªçi ph·∫£n h·ªìi API ƒë·ªÉ h·ªó tr·ª£ trace, ƒëo th·ªùi gian, ho·∫∑c ch·∫©n ƒëo√°n l·ªói.
      required:
        - trace_id
        - timestamp
      properties:
        trace_id:
          type: string
          readOnly: true
          description: M√£ ƒë·ªãnh danh lu·ªìng x·ª≠ l√Ω, do h·ªá th·ªëng sinh ra v√† ph·∫£n h·ªìi l·∫°i
          example: "req-123e4567-e89b-12d3-a456-426614174000"
        timestamp:
          type: string
          format: date-time
          readOnly: true
          description: Th·ªùi ƒëi·ªÉm h·ªá th·ªëng tr·∫£ response
          example: "2025-06-13T09:45:00Z"
      example:
        trace_id: "req-123e4567-e89b-12d3-a456-426614174000"
        timestamp: "2025-06-13T09:45:00Z"

    # === Error ===
    ErrorEnvelope:
      type: object
      description: |
        C·∫•u tr√∫c chu·∫©n cho m·ªçi l·ªói tr·∫£ v·ªÅ t·ª´ API.  
        Kh√¥ng ƒë∆∞·ª£c client g·ª≠i v√†o, ch·ªâ d√πng ƒë·ªÉ ƒë·ªçc l·ªói tr·∫£ v·ªÅ.
      readOnly: true
      required:
        - error
        - meta
      properties:
        error:
          type: object
          required:
            - code
            - message
          properties:
            code:
              type: string
              description: "M√£ l·ªói chu·∫©n theo error-codes.md (VD: `user.user_not_found`, `common.validation_failed`)"
              example: "user.user_not_found"
              readOnly: true
            message:
              type: string
              description: Th√¥ng ƒëi·ªáp l·ªói cho developer
              example: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng t∆∞∆°ng ·ª©ng v·ªõi email + provider"
              readOnly: true
            details:
              type: object
              additionalProperties: true
              description: Th√¥ng tin b·ªï sung gi√∫p debug
              example:
                email: "alice@vas.edu.vn"
                provider: "otp"
              readOnly: true
        meta:
          $ref: "#/components/schemas/ResponseMeta"
      example:
        error:
          code: "user.user_not_found"
          message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng t∆∞∆°ng ·ª©ng v·ªõi email + provider"
          details:
            email: "alice@vas.edu.vn"
            provider: "otp"
        meta:
          trace_id: "req-123e4567-e89b-12d3-a456-426614174000"
          timestamp: "2025-06-13T09:45:00Z"

    # === Success ===
    SuccessEnvelope:
      type: object
      description: |
        C·∫•u tr√∫c chu·∫©n cho m·ªçi ph·∫£n h·ªìi th√†nh c√¥ng t·ª´ API.  
        D·ªØ li·ªáu th·ª±c t·∫ø ƒë∆∞·ª£c ƒë·∫∑t trong field `data`, k√®m metadata h·ªá th·ªëng trong `meta`.
      required:
        - data
        - meta
      properties:
        data:
          description: Payload d·ªØ li·ªáu tr·∫£ v·ªÅ t·ª´ API
          nullable: false
          oneOf:
            - $ref: "#/components/schemas/UserGlobal"        # v√≠ d·ª• cho API c·ª• th·ªÉ
            - type: array                                    # cho c√°c API list
              items:
                type: object                                 # ho·∫∑c $ref kh√°c
            - type: object                                   # fallback
        meta:
          $ref: "#/components/schemas/ResponseMeta"

      example:
        data:
          user_id: "usr_abc123"
          email: "alice@vas.edu.vn"
          full_name: "Alice B"
          auth_provider: "google"
          status: "active"
          created_at: "2025-06-13T08:00:00Z"
        meta:
          trace_id: "req-123e4567-e89b-12d3-a456-426614174000"
          timestamp: "2025-06-13T09:45:00Z"

    # --- ENUMS ---

    AuthProvider:
      type: string
      description: |
        Ngu·ªìn x√°c th·ª±c c·ªßa ng∆∞·ªùi d√πng. ƒê∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ ph√¢n bi·ªát c√°c provider ƒëƒÉng nh·∫≠p.
      enum: [google, local, otp]
      example: google

    UserStatus:
      type: string
      description: |
        Tr·∫°ng th√°i ho·∫°t ƒë·ªông to√†n c·ª•c c·ªßa ng∆∞·ªùi d√πng.
      enum: [active, inactive]
      example: active

    ServiceScope:
      type: string
      description: |
        ƒê·ªãnh danh t√™n d·ªãch v·ª• √°p d·ª•ng cho permission ho·∫∑c RBAC template.  
        V√≠ d·ª•: `report`, `lms`, `finance`.
      example: finance

    PermissionKey:
      type: string
      description: |
        ƒê·ªãnh danh m·ªôt quy·ªÅn c·ª• th·ªÉ trong h·ªá th·ªëng RBAC.  
        C√≥ ƒë·ªãnh d·∫°ng: `<service_scope>.<action>`, v√≠ d·ª•: `report.view`.
      example: report.view

    RoleTemplateKey:
      type: string
      description: |
        ƒê·ªãnh danh duy nh·∫•t cho role template to√†n c·ª•c, d√πng trong c√°c tenant ƒë·ªÉ g√°n cho ng∆∞·ªùi d√πng.
      example: teacher_basic

    # --- OBJECT SCHEMAS ---

    UserGlobal:
      type: object
      description: |
        Th√¥ng tin ng∆∞·ªùi d√πng to√†n c·ª•c ‚Äì l∆∞u tr·ªØ t·∫°i `user-service/master` ƒë·ªÉ ph·ª•c v·ª• ƒëƒÉng nh·∫≠p, ph√¢n quy·ªÅn v√† tra c·ª©u ƒë·ªãnh danh ng∆∞·ªùi d√πng tr√™n to√†n h·ªá th·ªëng.
      required:
        - user_id
        - email
        - full_name
        - auth_provider
        - status
        - created_at
      properties:
        user_id:
          type: string
          description: M√£ ƒë·ªãnh danh to√†n c·ª•c (UUID ho·∫∑c ƒë·ªãnh d·∫°ng chu·∫©n n·ªôi b·ªô)
          example: "usr_abc123"
        email:
          type: string
          format: email
          description: ƒê·ªãa ch·ªâ email d√πng ƒë·ªÉ ƒëƒÉng nh·∫≠p ho·∫∑c x√°c th·ª±c
          example: "alice@vas.edu.vn"
        full_name:
          type: string
          description: H·ªç v√† t√™n ƒë·∫ßy ƒë·ªß c·ªßa ng∆∞·ªùi d√πng
          example: "Alice B"
        auth_provider:
          $ref: "#/components/schemas/AuthProvider"
        status:
          $ref: "#/components/schemas/UserStatus"
        created_at:
          type: string
          format: date-time
          description: Th·ªùi ƒëi·ªÉm ng∆∞·ªùi d√πng ƒë∆∞·ª£c t·∫°o tr√™n h·ªá th·ªëng
          example: "2025-06-13T08:00:00Z"

    UserGlobalCreateRequest:
      type: object
      required:
        - email
        - auth_provider
        - full_name
      properties:
        email:
          type: string
          format: email
          example: "bob@vas.edu.vn"
        auth_provider:
          $ref: '#/components/schemas/AuthProvider'
        full_name:
          type: string
          example: "Bob Nguy·ªÖn"
  
    TenantResponse:
      type: object
      description: Th√¥ng tin m·ªôt tenant ƒë∆∞·ª£c qu·∫£n l√Ω trong h·ªá th·ªëng.
      required:
        - tenant_id
        - tenant_code
        - tenant_name
        - created_at
      properties:
        tenant_id:
          type: string
          format: uuid
          example: "ten-32b1ac04-9c17-4f33-a56e-224fa9018c01"
          description: UUID ƒë·ªãnh danh duy nh·∫•t cho tenant

        tenant_code:
          type: string
          example: "vas_hn"
          description: M√£ ƒë·ªãnh danh ng·∫Øn g·ªçn, d√πng ƒë·ªÉ mount context ho·∫∑c subdomain

        tenant_name:
          type: string
          example: "Tr∆∞·ªùng Vi·ªát Anh - H√† N·ªôi"
          description: T√™n hi·ªÉn th·ªã ƒë·∫ßy ƒë·ªß c·ªßa tenant

        created_at:
          type: string
          format: date-time
          example: "2025-06-13T09:45:00Z"
          description: Th·ªùi ƒëi·ªÉm t·∫°o tenant

      example:
        tenant_id: "ten-32b1ac04-9c17-4f33-a56e-224fa9018c01"
        tenant_code: "vas_hn"
        tenant_name: "Tr∆∞·ªùng Ti·ªÉu H·ªçc Vi·ªát Anh"
        created_at: "2025-06-13T09:45:00Z"

    TenantCreateRequest:
      type: object
      required:
        - tenant_code
        - tenant_name
      properties:
        tenant_code:
          type: string
          example: "vas_hcm"
          description: "M√£ ƒë·ªãnh danh ng·∫Øn cho tenant, vi·∫øt li·ªÅn kh√¥ng d·∫•u (VD: `vas_hn`, `vas_hcm`)"

        tenant_name:
          type: string
          example: "Tr∆∞·ªùng Ti·ªÉu H·ªçc Vi·ªát Anh"
          description: T√™n ƒë·∫ßy ƒë·ªß c·ªßa tenant

    UserTenantAssignmentResponse:
      type: object
      description: Th√¥ng tin g√°n ng∆∞·ªùi d√πng v√†o m·ªôt tenant v·ªõi role template t∆∞∆°ng ·ª©ng
      required:
        - tenant_id
        - role_template_key
        - assigned_by
        - assigned_at
      properties:
        tenant_id:
          type: string
          format: uuid
          example: "ten-32b1ac04-9c17-4f33-a56e-224fa9018c01"
          description: ID tenant m√† ng∆∞·ªùi d√πng ƒë∆∞·ª£c g√°n

        role_template_key:
          $ref: '#/components/schemas/RoleTemplateKey'

        assigned_by:
          type: string
          example: "usr_admin01"
          description: ID c·ªßa ng∆∞·ªùi th·ª±c hi·ªán thao t√°c g√°n

        assigned_at:
          type: string
          format: date-time
          example: "2025-06-13T09:45:00Z"
          description: Th·ªùi ƒëi·ªÉm g√°n

      example:
        tenant_id: "ten-32b1ac04-9c17-4f33-a56e-224fa9018c01"
        role_template_key: "teacher_basic"
        assigned_by: "usr_superadmin"
        assigned_at: "2025-06-13T09:45:00Z"

    UserTenantAssignmentCreateRequest:
      type: object
      description: D·ªØ li·ªáu c·∫ßn thi·∫øt ƒë·ªÉ g√°n ng∆∞·ªùi d√πng v√†o tenant v·ªõi role template
      required:
        - user_id
        - tenant_id
        - role_template_key
      properties:
        user_id:
          type: string
          example: "usr_abc123"
          description: ID ng∆∞·ªùi d√πng to√†n c·ª•c c·∫ßn g√°n

        tenant_id:
          type: string
          format: uuid
          example: "ten-32b1ac04-9c17-4f33-a56e-224fa9018c01"
          description: ID c·ªßa tenant

        role_template_key:
          $ref: '#/components/schemas/RoleTemplateKey'

      example:
        user_id: "usr_abc123"
        tenant_id: "ten-32b1ac04-9c17-4f33-a56e-224fa9018c01"
        role_template_key: "teacher_basic"

    RoleTemplateResponse:
      type: object
      description: Th√¥ng tin m·ªôt role template to√†n c·ª•c
      required:
        - template_key
        - template_name
        - permissions
        - created_at
      properties:
        template_key:
          $ref: '#/components/schemas/RoleTemplateKey'

        template_name:
          type: string
          description: T√™n hi·ªÉn th·ªã d·ªÖ hi·ªÉu c·ªßa template
          example: "Gi√°o vi√™n c∆° b·∫£n"

        permissions:
          type: array
          items:
            $ref: '#/components/schemas/PermissionKey'
          description: Danh s√°ch quy·ªÅn m√† role n√†y bao g·ªìm

        created_at:
          type: string
          format: date-time
          description: Th·ªùi ƒëi·ªÉm t·∫°o role template
          example: "2025-06-13T10:00:00Z"

      example:
        template_key: "teacher_basic"
        template_name: "Gi√°o vi√™n c∆° b·∫£n"
        permissions:
          - "lms.view"
          - "lms.grade"
        created_at: "2025-06-13T10:00:00Z"

    RoleTemplateCreateRequest:
      type: object
      description: D·ªØ li·ªáu ƒë·ªÉ t·∫°o m·ªõi m·ªôt role template to√†n c·ª•c
      required:
        - template_key
        - template_name
        - permissions
      properties:
        template_key:
          $ref: '#/components/schemas/RoleTemplateKey'

        template_name:
          type: string
          example: "Gi√°o vi√™n n√¢ng cao"
          description: T√™n hi·ªÉn th·ªã c·ªßa role template

        permissions:
          type: array
          items:
            $ref: '#/components/schemas/PermissionKey'
          description: Danh s√°ch c√°c quy·ªÅn c√≥ trong role template

      example:
        template_key: "teacher_advanced"
        template_name: "Gi√°o vi√™n n√¢ng cao"
        permissions:
          - "lms.view"
          - "lms.grade"
          - "lms.assign"

    PermissionTemplateResponse:
      type: object
      description: Th√¥ng tin m·ªôt permission template to√†n c·ª•c
      required:
        - perm_key
        - perm_name
        - scope
        - created_at
      properties:
        perm_key:
          $ref: '#/components/schemas/PermissionKey'

        perm_name:
          type: string
          example: "Xem ƒëi·ªÉm LMS"
          description: T√™n hi·ªÉn th·ªã r√µ nghƒ©a cho quy·ªÅn

        scope:
          $ref: '#/components/schemas/ServiceScope'

        created_at:
          type: string
          format: date-time
          example: "2025-06-13T10:00:00Z"
          description: Th·ªùi ƒëi·ªÉm t·∫°o permission

      example:
        perm_key: "lms.view"
        perm_name: "Xem ƒëi·ªÉm LMS"
        scope: "lms"
        created_at: "2025-06-13T10:00:00Z"

    PermissionTemplateCreateRequest:
      type: object
      description: D·ªØ li·ªáu ƒë·ªÉ t·∫°o m·ªõi m·ªôt permission template to√†n c·ª•c
      required:
        - perm_key
        - perm_name
        - scope
      properties:
        perm_key:
          $ref: '#/components/schemas/PermissionKey'

        perm_name:
          type: string
          example: "Ch·∫•m ƒëi·ªÉm LMS"
          description: T√™n hi·ªÉn th·ªã d·ªÖ hi·ªÉu cho quy·ªÅn

        scope:
          $ref: '#/components/schemas/ServiceScope'

      example:
        perm_key: "lms.grade"
        perm_name: "Ch·∫•m ƒëi·ªÉm LMS"
        scope: "lms"

    RoleTemplateUpdateRequest:
      type: object
      description: D·ªØ li·ªáu ƒë·ªÉ c·∫≠p nh·∫≠t role template to√†n c·ª•c
      properties:
        template_name:
          type: string
          description: T√™n hi·ªÉn th·ªã m·ªõi
          example: "Gi√°o vi√™n n√¢ng cao"

        permissions:
          type: array
          items:
            $ref: '#/components/schemas/PermissionKey'
          description: Danh s√°ch quy·ªÅn m·ªõi c·ªßa template

      example:
        template_name: "Gi√°o vi√™n n√¢ng cao"
        permissions:
          - "lms.view"
          - "lms.grade"
          - "lms.comment"

    PermissionTemplateUpdateRequest:
      type: object
      description: D·ªØ li·ªáu ƒë·ªÉ c·∫≠p nh·∫≠t permission template to√†n c·ª•c
      properties:
        perm_name:
          type: string
          description: T√™n hi·ªÉn th·ªã m·ªõi c·ªßa permission
          example: "C·∫≠p nh·∫≠t ƒëi·ªÉm LMS"

        scope:
          $ref: '#/components/schemas/ServiceScope'

      example:
        perm_name: "C·∫≠p nh·∫≠t ƒëi·ªÉm LMS"
        scope: "lms"

  #___Responses___
  responses:
    400BadRequest:
      description: Bad Request ‚Äì Request kh√¥ng h·ª£p l·ªá ho·∫∑c thi·∫øu field b·∫Øt bu·ªôc
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorEnvelope'
          example:
            bad_request:
              $ref: '#/components/examples/MissingParamError'

    401Unauthorized:
      description: Unauthorized ‚Äì Thi·∫øu ho·∫∑c JWT kh√¥ng h·ª£p l·ªá
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorEnvelope'
          example:
            unauthorized:
              $ref: '#/components/examples/UnauthorizedError'

    403Forbidden:
      description: Forbidden ‚Äì Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p t√†i nguy√™n
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorEnvelope'
          example:
            forbidden:
              $ref: '#/components/examples/ForbiddenError'

    404NotFound:
      description: Not Found ‚Äì Kh√¥ng t√¨m th·∫•y t√†i nguy√™n
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorEnvelope'
          example:
            user_not_found:
              $ref: '#/components/examples/UserNotFoundError'

    409Conflict:
      description: Conflict ‚Äì D·ªØ li·ªáu ƒë√£ t·ªìn t·∫°i ho·∫∑c tr·∫°ng th√°i kh√¥ng cho ph√©p
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorEnvelope'
          example:
            tenant_conflict:
              $ref: '#/components/examples/TenantConflictError'

    422UnprocessableEntity:
      description: Unprocessable Entity ‚Äì D·ªØ li·ªáu ƒë√∫ng ƒë·ªãnh d·∫°ng nh∆∞ng kh√¥ng x·ª≠ l√Ω ƒë∆∞·ª£c
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorEnvelope'
          example:
            validation_failed:
              $ref: '#/components/examples/ValidationFailedError'

    500InternalError:
      description: Internal Server Error ‚Äì L·ªói kh√¥ng mong mu·ªën ph√≠a server
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorEnvelope'
          example:
            internal_error:
              $ref: '#/components/examples/InternalServerError'

  #===Examples===
  examples:
    MissingParamError:
      summary: "Request thi·∫øu tr∆∞·ªùng b·∫Øt bu·ªôc (v√≠ d·ª•: email)"
      value:
        error:
          code: "common.missing_param"
          message: "Thi·∫øu tr∆∞·ªùng b·∫Øt bu·ªôc: email"
          details:
            missing_field: "email"
        meta:
          trace_id: "req-abc123"
          timestamp: "2025-06-13T08:00:00Z"

    UnauthorizedError:
      summary: Y√™u c·∫ßu x√°c th·ª±c b·∫±ng JWT
      value:
        error:
          code: "auth.unauthorized"
          message: "Y√™u c·∫ßu x√°c th·ª±c b·∫±ng JWT"
          details: {}
        meta:
          trace_id: "req-def456"
          timestamp: "2025-06-13T08:01:00Z"

    ForbiddenError:
      summary: Ng∆∞·ªùi d√πng kh√¥ng c√≥ quy·ªÅn truy c·∫≠p t√†i nguy√™n
      value:
        error:
          code: "auth.permission_denied"
          message: "Ng∆∞·ªùi d√πng kh√¥ng c√≥ quy·ªÅn truy c·∫≠p t√†i nguy√™n n√†y"
          details: {}
        meta:
          trace_id: "req-ghi789"
          timestamp: "2025-06-13T08:02:00Z"

    UserNotFoundError:
      summary: Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi email + provider
      value:
        error:
          code: "user.not_found"
          message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi email + provider"
          details:
            email: "alice@vas.edu.vn"
            provider: "otp"
        meta:
          trace_id: "req-jkl012"
          timestamp: "2025-06-13T08:03:00Z"

    TenantConflictError:
      summary: Tenant v·ªõi m√£ ƒë√£ t·ªìn t·∫°i
      value:
        error:
          code: "tenant.conflict"
          message: "Tenant v·ªõi m√£ 'vas_hcm' ƒë√£ t·ªìn t·∫°i"
          details:
            tenant_code: "vas_hcm"
        meta:
          trace_id: "req-mno345"
          timestamp: "2025-06-13T08:04:00Z"

    ValidationFailedError:
      summary: D·ªØ li·ªáu kh√¥ng th·ªèa m√£n r√†ng bu·ªôc nghi·ªáp v·ª•
      value:
        error:
          code: "validation.failed"
          message: "D·ªØ li·ªáu kh√¥ng th·ªèa m√£n r√†ng bu·ªôc nghi·ªáp v·ª•"
          details:
            constraint: "email must be unique within auth_provider"
        meta:
          trace_id: "req-pqr678"
          timestamp: "2025-06-13T08:05:00Z"

    InternalServerError:
      summary: L·ªói kh√¥ng x√°c ƒë·ªãnh trong h·ªá th·ªëng
      value:
        error:
          code: "common.internal_error"
          message: "L·ªói kh√¥ng x√°c ƒë·ªãnh trong h·ªá th·ªëng"
          details: {}
        meta:
          trace_id: "req-stu901"
          timestamp: "2025-06-13T08:06:00Z"

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

paths:
  /users-global/by-email:
    get:
      tags: [User Global]
      summary: Tra c·ª©u ng∆∞·ªùi d√πng to√†n c·ª•c theo email + auth_provider
      description: |
        Truy v·∫•n ng∆∞·ªùi d√πng to√†n c·ª•c theo c·∫∑p `email` v√† `auth_provider`.  
        S·ª≠ d·ª•ng trong qu√° tr√¨nh x√°c th·ª±c ho·∫∑c t√¨m ki·∫øm ng∆∞·ªùi d√πng ƒë·ªÉ ph√¢n quy·ªÅn v√†o tenant.
      operationId: getUserGlobalByEmail
      security:
        - BearerAuth: []
      x-required-permission: user.read
      x-condition:
        email: required
        auth_provider: required
      parameters:
        - $ref: '#/components/parameters/EmailQueryParam'
        - $ref: '#/components/parameters/AuthProviderQueryParam'
        - $ref: '#/components/parameters/X-Request-ID'

      responses:
        '200':
          description: Th√†nh c√¥ng ‚Äì Tr·∫£ v·ªÅ th√¥ng tin ng∆∞·ªùi d√πng to√†n c·ª•c
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/UserGlobal'
                  meta:
                    $ref: '#/components/schemas/ResponseMeta'

        '400':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/400BadRequest'

        '401':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/401Unauthorized'

        '403':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/403Forbidden'

        '404':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/404NotFound'

        '500':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/500InternalError'

      x-gateway-enforced: true
      x-route-evaluation: "check-permission + query-user"

  /users-global:
    post:
      tags: [User Global]
      summary: T·∫°o ng∆∞·ªùi d√πng to√†n c·ª•c m·ªõi
      description: |
        T·∫°o m·ªõi m·ªôt ng∆∞·ªùi d√πng to√†n c·ª•c theo th√¥ng tin ƒë∆∞·ª£c cung c·∫•p, ph·ª•c v·ª• ƒëƒÉng nh·∫≠p v√† qu·∫£n l√Ω RBAC.  
        N·∫øu ng∆∞·ªùi d√πng ƒë√£ t·ªìn t·∫°i theo `email + auth_provider`, API s·∫Ω tr·∫£ v·ªÅ l·ªói 409.
      operationId: createUserGlobal
      security:
        - BearerAuth: []
      x-required-permission: user.create
      x-condition:
        email: required
        auth_provider: required
        full_name: required
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserGlobalCreateRequest'
      parameters:
        - $ref: '#/components/parameters/X-Request-ID'

      responses:
        '201':
          description: T·∫°o th√†nh c√¥ng ng∆∞·ªùi d√πng to√†n c·ª•c
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessEnvelope'

        '400':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/400BadRequest'

        '401':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/401Unauthorized'

        '403':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/403Forbidden'

        '409':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/409Conflict'

        '500':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/500InternalError'

      x-emits-event: user_global.created.v1
      x-gateway-enforced: true
      x-route-evaluation: "check-permission + create-user"

  /tenants:
    get:
      tags: [Tenant]
      summary: Li·ªát k√™ c√°c tenant hi·ªán c√≥
      description: |
        Tr·∫£ v·ªÅ danh s√°ch c√°c tenant hi·ªán c√≥ tr√™n to√†n h·ªá th·ªëng.  
        Ch·ªâ ng∆∞·ªùi d√πng c√≥ quy·ªÅn `tenant.read` m·ªõi ƒë∆∞·ª£c ph√©p truy c·∫≠p.
      operationId: listTenants
      security:
        - BearerAuth: []
      x-required-permission: tenant.read
      parameters:
        - $ref: '#/components/parameters/X-Request-ID'

      responses:
        '200':
          description: Danh s√°ch c√°c tenant
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/TenantResponse'
                  meta:
                    $ref: '#/components/schemas/ResponseMeta'

        '401':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/401Unauthorized'

        '403':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/403Forbidden'

        '500':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/500InternalError'

      x-gateway-enforced: true
      x-route-evaluation: "check-permission + query-all-tenants"

    post:
      tags: [Tenant]
      summary: T·∫°o tenant m·ªõi
      description: |
        API cho ph√©p t·∫°o m·ªôt tenant m·ªõi trong h·ªá th·ªëng.  
        Ch·ªâ superadmin ho·∫∑c ng∆∞·ªùi c√≥ quy·ªÅn `tenant.create` m·ªõi c√≥ th·ªÉ g·ªçi.
      operationId: createTenant
      security:
        - BearerAuth: []
      x-required-permission: tenant.create
      x-condition:
        tenant_code: required
        tenant_name: required
      parameters:
        - $ref: '#/components/parameters/X-Request-ID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TenantCreateRequest'

      responses:
        '201':
          description: T·∫°o th√†nh c√¥ng tenant m·ªõi
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessEnvelope'

        '400':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/400BadRequest'

        '401':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/401Unauthorized'

        '403':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/403Forbidden'

        '409':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/409Conflict'

        '500':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/500InternalError'

      x-emits-event: tenant.created.v1
      x-gateway-enforced: true
      x-route-evaluation: "check-permission + create-tenant"

  /user-tenant-assignments:
    get:
      tags: [Tenant Assignment]
      summary: Li·ªát k√™ c√°c tenant m√† ng∆∞·ªùi d√πng ƒë∆∞·ª£c g√°n v√†o
      description: |
        Tr·∫£ v·ªÅ danh s√°ch c√°c tenant m√† ng∆∞·ªùi d√πng ƒë√£ ƒë∆∞·ª£c g√°n v√†o c√πng role template t∆∞∆°ng ·ª©ng.  
        G·ªçi b·ªüi superadmin ho·∫∑c c√°c service c·∫ßn ƒë·ªìng b·ªô RBAC ph√¢n t·∫ßng.
      operationId: listTenantAssignmentsForUser
      security:
        - BearerAuth: []
      x-required-permission: tenant_assignment.read
      x-condition:
        user_id: required
      parameters:
        - name: user_id
          in: query
          required: true
          schema:
            type: string
          description: ID to√†n c·ª•c c·ªßa ng∆∞·ªùi d√πng c·∫ßn tra c·ª©u
        - $ref: '#/components/parameters/X-Request-ID'

      responses:
        '200':
          description: Danh s√°ch tenant assignment cho ng∆∞·ªùi d√πng
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserTenantAssignmentResponse'
                  meta:
                    $ref: '#/components/schemas/ResponseMeta'

        '400':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/400BadRequest'

        '401':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/401Unauthorized'

        '403':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/403Forbidden'

        '500':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/500InternalError'

      x-gateway-enforced: true
      x-route-evaluation: "check-permission + query-assignment"

    post:
      tags: [Tenant Assignment]
      summary: G√°n ng∆∞·ªùi d√πng v√†o tenant v·ªõi role template
      description: |
        G√°n quy·ªÅn cho m·ªôt ng∆∞·ªùi d√πng trong tenant c·ª• th·ªÉ b·∫±ng role template.  
        Endpoint n√†y ch·ªâ ƒë∆∞·ª£c g·ªçi b·ªüi Superadmin Web ho·∫∑c c√°c service ƒë∆∞·ª£c ·ªßy quy·ªÅn.
      operationId: assignUserToTenant
      security:
        - BearerAuth: []
      x-required-permission: tenant_assignment.create
      x-condition:
        user_id: required
        tenant_id: required
        role_template_key: required
      parameters:
        - $ref: '#/components/parameters/X-Request-ID'

      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserTenantAssignmentCreateRequest'

      responses:
        '201':
          description: G√°n th√†nh c√¥ng ng∆∞·ªùi d√πng v√†o tenant
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessEnvelope'

        '400':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/400BadRequest'

        '401':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/401Unauthorized'

        '403':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/403Forbidden'

        '409':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/409Conflict'

        '500':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/500InternalError'

      x-emits-event: tenant.assignment.created.v1
      x-gateway-enforced: true
      x-route-evaluation: "check-permission + create-assignment"

  /global-roles-templates:
    get:
      tags: [Global Role Template]
      summary: Li·ªát k√™ t·∫•t c·∫£ role template to√†n c·ª•c
      description: |
        Tr·∫£ v·ªÅ danh s√°ch c√°c role template to√†n c·ª•c ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a tr∆∞·ªõc trong h·ªá th·ªëng.  
        C√°c template n√†y ƒë∆∞·ª£c d√πng khi g√°n quy·ªÅn cho ng∆∞·ªùi d√πng trong tenant.
      operationId: listGlobalRoleTemplates
      security:
        - BearerAuth: []
      x-required-permission: role_template.read
      parameters:
        - $ref: '#/components/parameters/X-Request-ID'

      responses:
        '200':
          description: Danh s√°ch role template to√†n c·ª•c
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/RoleTemplateResponse'
                  meta:
                    $ref: '#/components/schemas/ResponseMeta'

        '401':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/401Unauthorized'

        '403':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/403Forbidden'

        '500':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/500InternalError'

      x-gateway-enforced: true
      x-route-evaluation: "check-permission + query-role-templates"

    post:
      tags: [Global Role Template]
      summary: T·∫°o role template to√†n c·ª•c m·ªõi
      description: |
        T·∫°o m·ªõi m·ªôt role template to√†n c·ª•c ƒë·ªÉ d√πng cho vi·ªác ph√¢n quy·ªÅn ng∆∞·ªùi d√πng v√†o tenant.  
        Ch·ªâ Superadmin ho·∫∑c c√°c service ƒë∆∞·ª£c ph√¢n quy·ªÅn `role_template.create` m·ªõi ƒë∆∞·ª£c ph√©p g·ªçi.
      operationId: createGlobalRoleTemplate
      security:
        - BearerAuth: []
      x-required-permission: role_template.create
      x-condition:
        template_key: required
        template_name: required
        permissions: required
      parameters:
        - $ref: '#/components/parameters/X-Request-ID'

      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleTemplateCreateRequest'

      responses:
        '201':
          description: T·∫°o th√†nh c√¥ng role template m·ªõi
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessEnvelope'

        '400':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/400BadRequest'

        '401':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/401Unauthorized'

        '403':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/403Forbidden'

        '409':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/409Conflict'

        '500':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/500InternalError'

      x-emits-event: role_template.created.v1
      x-gateway-enforced: true
      x-route-evaluation: "check-permission + create-role-template"

  /global-permissions-templates:
    get:
      tags: [Global Permission Template]
      summary: Li·ªát k√™ t·∫•t c·∫£ permission template to√†n c·ª•c
      description: |
        Tr·∫£ v·ªÅ danh s√°ch c√°c permission template to√†n c·ª•c ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a tr∆∞·ªõc,  
        d√πng ƒë·ªÉ g√°n v√†o role template.  
        Ch·ªâ ng∆∞·ªùi c√≥ quy·ªÅn `permission_template.read` m·ªõi ƒë∆∞·ª£c ph√©p g·ªçi.
      operationId: listGlobalPermissionTemplates
      security:
        - BearerAuth: []
      x-required-permission: permission_template.read
      parameters:
        - $ref: '#/components/parameters/X-Request-ID'

      responses:
        '200':
          description: Danh s√°ch permission template to√†n c·ª•c
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/PermissionTemplateResponse'
                  meta:
                    $ref: '#/components/schemas/ResponseMeta'

        '401':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/401Unauthorized'

        '403':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/403Forbidden'

        '500':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/500InternalError'

      x-gateway-enforced: true
      x-route-evaluation: "check-permission + query-permission-templates"

    post:
      tags: [Global Permission Template]
      summary: T·∫°o permission template to√†n c·ª•c m·ªõi
      description: |
        T·∫°o m·ªôt permission template to√†n c·ª•c m·ªõi ƒë·ªÉ s·ª≠ d·ª•ng trong c√°c role template.  
        Ch·ªâ Superadmin ho·∫∑c ng∆∞·ªùi c√≥ quy·ªÅn `permission_template.create` m·ªõi ƒë∆∞·ª£c ph√©p g·ªçi.
      operationId: createGlobalPermissionTemplate
      security:
        - BearerAuth: []
      x-required-permission: permission_template.create
      x-condition:
        perm_key: required
        perm_name: required
        scope: required
      parameters:
        - $ref: '#/components/parameters/X-Request-ID'

      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PermissionTemplateCreateRequest'

      responses:
        '201':
          description: T·∫°o th√†nh c√¥ng permission template
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessEnvelope'

        '400':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/400BadRequest'

        '401':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/401Unauthorized'

        '403':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/403Forbidden'

        '409':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/409Conflict'

        '500':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/500InternalError'

      x-emits-event: permission_template.created.v1
      x-gateway-enforced: true
      x-route-evaluation: "check-permission + create-permission-template"

  /global-roles-templates/{template_key}:
    patch:
      tags: [Global Role Template]
      summary: C·∫≠p nh·∫≠t th√¥ng tin role template to√†n c·ª•c
      description: |
        C·∫≠p nh·∫≠t t√™n hi·ªÉn th·ªã v√† danh s√°ch permissions cho role template to√†n c·ª•c.  
        Kh√¥ng ƒë∆∞·ª£c ph√©p thay ƒë·ªïi `template_key` sau khi t·∫°o.
      operationId: updateGlobalRoleTemplate
      security:
        - BearerAuth: []
      x-required-permission: role_template.update
      x-condition:
        template_key: path
      parameters:
        - name: template_key
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/RoleTemplateKey'
          description: Kh√≥a ƒë·ªãnh danh role template c·∫ßn c·∫≠p nh·∫≠t

        - $ref: '#/components/parameters/X-Request-ID'

      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleTemplateUpdateRequest'

      responses:
        '200':
          description: C·∫≠p nh·∫≠t th√†nh c√¥ng role template
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessEnvelope'

        '400':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/400BadRequest'

        '401':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/401Unauthorized'

        '403':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/403Forbidden'

        '404':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/404NotFound'

        '500':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/500InternalError'

      x-emits-event: role_template.updated.v1
      x-gateway-enforced: true
      x-route-evaluation: "check-permission + update-role-template"

  /global-permissions-templates/{perm_key}:
    patch:
      tags: [Global Permission Template]
      summary: C·∫≠p nh·∫≠t th√¥ng tin permission template to√†n c·ª•c
      description: |
        C·∫≠p nh·∫≠t t√™n hi·ªÉn th·ªã (`perm_name`) ho·∫∑c scope cho permission template to√†n c·ª•c.  
        Kh√¥ng cho ph√©p thay ƒë·ªïi `perm_key`.
      operationId: updateGlobalPermissionTemplate
      security:
        - BearerAuth: []
      x-required-permission: permission_template.update
      x-condition:
        perm_key: path
      parameters:
        - name: perm_key
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/PermissionKey'
          description: Kh√≥a ƒë·ªãnh danh permission c·∫ßn c·∫≠p nh·∫≠t

        - $ref: '#/components/parameters/X-Request-ID'

      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PermissionTemplateUpdateRequest'

      responses:
        '200':
          description: C·∫≠p nh·∫≠t th√†nh c√¥ng permission template
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessEnvelope'

        '400':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/400BadRequest'

        '401':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/401Unauthorized'

        '403':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/403Forbidden'

        '404':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/404NotFound'

        '500':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/500InternalError'

      x-emits-event: permission_template.updated.v1
      x-gateway-enforced: true
      x-route-evaluation: "check-permission + update-permission-template"
