openapi: 3.0.3
info:
  title: Auth Service Master ‚Äì OpenAPI Spec
  version: "2.3"
  description: |
    API specification for the Auth Service Master.
    Tu√¢n th·ªß ADR-011 (API Error Format), ADR-012 (API Response Envelope), v√† ADR-006 (Auth Strategy).

    - ƒê∆∞·ª£c s·ª≠ d·ª•ng b·ªüi c√°c h·ªá th·ªëng frontend (admin portal, app), API Gateway, v√† c√°c services n·ªôi b·ªô.
    - T√†i li·ªáu li√™n quan:
      - [Design Document](./design.md)
      - [Interface Contract](./interface-contract.md)
      - [Data Model](./data-model.md)

  contact:
    name: DX VAS Team
    email: dx@truongvietanh.edu.vn

  x-service: auth-service/master
  x-api-version: v1
  x-last-updated: 2025-06-12
  x-maintainer: dx-team@truongvietanh.edu.vn
  x-adr-compliance:
    - adr-011-api-error-format
    - adr-012-response-structure
    - adr-026-hard-delete-policy
    - adr-027-data-management-strategy

servers:
  - url: https://api.truongvietanh.edu.vn/auth-master/v1
    description: Production
  - url: https://staging-api.truongvietanh.edu.vn/auth-master/v1
    description: Staging

tags:
  - name: OAuth2
    description: ƒêƒÉng nh·∫≠p v·ªõi Google OAuth2
  - name: User Info
    description: Th√¥ng tin user
  - name:   Token Exchange
    description: thay token
  - name:   Token Verify
    description: x√°c th·ª±c token
  - name: OTP Login
    description: login b·∫±ng otp
  - name: Local Login
    description: login b·∫±ng usernam password
  - name: Provider Metadata
    description: L·∫•y danh s√°ch provider ƒëang ƒë∆∞·ª£c b·∫≠t
  - name: Dev Mode
    description: ch·∫ø ƒë·ªô dev mode ch·ªâ d√πng trong qu√° tr√¨nh ph√°t tri·ªÉn
      
security:
  - BearerAuth: []

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    AuthorizationHeader:
      name: Authorization
      in: header
      required: true
      description: "Bearer JWT token (format: Bearer <access_token>)"
      schema:
        type: string
        pattern: "^Bearer\\s.+$"
        example: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

    UserAgent:
      name: User-Agent
      in: header
      required: false
      schema:
        type: string
      description: |
        Header User-Agent chu·∫©n HTTP.  
        H·ªØu √≠ch ƒë·ªÉ ph√¢n t√≠ch h√†nh vi client ho·∫∑c ph·ª•c v·ª• audit b·∫£o m·∫≠t.

    X-Trace-ID:
      name: X-Trace-ID
      in: header
      required: true
      schema:
        type: string
        format: uuid
        example: "b68f6170-7095-4fa1-a6d1-7093dc3f2ec2"
      description: |
        M√£ ƒë·ªãnh danh duy nh·∫•t cho t·ª´ng request, d√πng ƒë·ªÉ theo d√µi lu·ªìng x·ª≠ l√Ω trong h·ªá th·ªëng (trace ID).  
        Gateway s·∫Ω sinh t·ª± ƒë·ªông n·∫øu client kh√¥ng g·ª≠i.

    X-Forwarded-For:
      name: X-Forwarded-For
      in: header
      required: false
      schema:
        type: string
      description: |
        IP g·ªëc c·ªßa client ƒë∆∞·ª£c forward b·ªüi proxy/gateway.  
        C√≥ th·ªÉ d√πng ƒë·ªÉ ƒë·ªãnh v·ªã ƒë·ªãa l√Ω ho·∫∑c truy v·∫øt trong audit log.

    X-Login-Method:
      name: X-Login-Method
      in: header
      required: false
      schema:
        type: string
        enum: [google, otp, local]
      description: |
        Ph∆∞∆°ng th·ª©c ƒëƒÉng nh·∫≠p ban ƒë·∫ßu.  
        Forwarded t·ª´ Gateway, d√πng ƒë·ªÉ logging ho·∫∑c ph√¢n t√≠ch h√†nh vi.

    TenantHeader:
      name: X-Tenant-ID
      in: header
      required: true
      description: |
        M√£ ƒë·ªãnh danh c·ªßa tenant hi·ªán t·∫°i m√† ng∆∞·ªùi d√πng ƒëang t∆∞∆°ng t√°c.  
        B·∫Øt bu·ªôc v·ªõi t·∫•t c·∫£ c√°c API ph√¢n t·∫ßng theo tenant ‚Äì d√πng cho ki·ªÉm tra RBAC ƒë·ªông ph√≠a backend.
      schema:
        type: string
        format: uuid
        example: "7f3e5c1d-b9e3-4c0a-a9fb-95f8d0a1db2f"

    Provider:
      name: provider
      in: query
      required: true
      description: "T√™n nh√† cung c·∫•p OAuth2 (v√≠ d·ª•: google)"
      schema:
        $ref: '#/components/schemas/ProviderEnum'
        example: google

  headers:
    X-Request-ID:
      description: ID ƒë·ªãnh danh duy nh·∫•t cho m·ªói request ‚Äì gi√∫p trace log hi·ªáu qu·∫£
      required: false
      schema:
        type: string
        format: uuid
      example: "7f3e5c1d-b9e3-4c0a-a9fb-95f8d0a1db2f"

  schemas:

    # ‚úÖ Enum
    LoginTypeEnum:
      type: string
      enum: [google, otp, local]
      description: |
        Ph∆∞∆°ng th·ª©c ƒëƒÉng nh·∫≠p ƒë∆∞·ª£c s·ª≠ d·ª•ng khi kh·ªüi t·∫°o phi√™n x√°c th·ª±c.  
        - `google`: ƒêƒÉng nh·∫≠p OAuth2 qua Google  
        - `otp`: ƒêƒÉng nh·∫≠p b·∫±ng m√£ OTP (SMS/email)  
        - `local`: ƒêƒÉng nh·∫≠p b·∫±ng username/password c·ª•c b·ªô

    ProviderEnum:
      type: string
      enum: [google, apple]
      description: C√°c provider h·ªó tr·ª£ OAuth2

    # üßæ Request
    OAuth2AuthorizeRequest:
      type: object
      required: [provider, redirect_uri]
      properties:
        provider:
          type: string
          description: "T√™n provider (v√≠ d·ª•: google)"
          example: "google"
        redirect_uri:
          type: string
          format: uri
          description: URI frontend s·∫Ω x·ª≠ l√Ω sau khi ƒëƒÉng nh·∫≠p th√†nh c√¥ng
          example: "https://frontend.app.vn/auth/callback"

    OAuth2CallbackPayload:
      type: object
      required: [code, state]
      properties:
        code:
          type: string
        state:
          type: string

    OTPLoginRequest:
      type: object
      required: [identifier, otp]
      properties:
        identifier:
          type: string
        otp:
          type: string

    LocalLoginRequest:
      type: object
      required: [username, password]
      properties:
        username:
          type: string
        password:
          type: string

    # üì¶ Response
    OAuth2CallbackResponse:
      type: object
      required: [access_token, refresh_token, expires_in]
      properties:
        access_token:
          type: string
          description: JWT d√πng ƒë·ªÉ truy c·∫≠p h·ªá th·ªëng
        refresh_token:
          type: string
          description: Token d√πng ƒë·ªÉ l√†m m·ªõi access_token
        expires_in:
          type: integer
          description: S·ªë gi√¢y access_token c√≥ hi·ªáu l·ª±c
          example: 3600

    RefreshTokenRequest:
      type: object
      required: [refresh_token]
      properties:
        refresh_token:
          type: string
          description: |
            Refresh token h·ª£p l·ªá ƒë√£ ƒë∆∞·ª£c c·∫•p tr∆∞·ªõc ƒë√≥.  
            ƒê∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ xin c·∫•p l·∫°i access_token m·ªõi khi token c≈© h·∫øt h·∫°n.
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

    MeResponse:
      type: object
      required: [user_id, full_name, email, permissions]
      properties:
        user_id:
          type: string
          format: uuid
        full_name:
          type: string
        email:
          type: string
          format: email
        avatar_url:
          type: string
          format: uri
          nullable: true
        current_tenant_id:
          type: string
          format: uuid
        permissions:
          type: array
          items:
            type: string

    ProviderOut:
      type: object
      required: [provider, is_enabled]
      properties:
        provider:
          type: string
          example: "google"
        is_enabled:
          type: boolean
        auth_url:
          type: string
          format: uri
          example: "https://accounts.google.com/o/oauth2/auth"
        scopes:
          type: array
          items:
            type: string

    # üì¶ Envelopes
    OAuth2CallbackEnvelope:
      type: object
      required: [data, meta, error]
      properties:
        data:
          $ref: '#/components/schemas/OAuth2CallbackResponse'
        meta:
          $ref: '#/components/schemas/ResponseMeta'
        error:
          type: object
          nullable: true

    MeEnvelope:
      type: object
      required: [data, meta, error]
      properties:
        data:
          $ref: '#/components/schemas/MeResponse'
        meta:
          $ref: '#/components/schemas/ResponseMeta'
        error:
          type: object
          nullable: true

    ProviderListEnvelope:
      type: object
      required: [data, meta, error]
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ProviderOut'
        meta:
          $ref: '#/components/schemas/ResponseMeta'
        error:
          type: object
          nullable: true

    # üéØ Error format theo ADR-011
    Error:
      type: object
      required: [code, message]
      properties:
        code:
          type: string
          example: auth.invalid_token
          description: |
            M√£ l·ªói ph√¢n lo·∫°i theo namespace. V√≠ d·ª•:
            - `auth.invalid_token`
            - `auth.unauthorized`
            - `rbac.permission_denied`
        message:
          type: string
          example: Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n
        details:
          type: array
          items:
            type: object
            additionalProperties: true
          description: Chi ti·∫øt ph·ª• tr·ª£ debug (n·∫øu c√≥)

    # üì¶ Meta chu·∫©n theo ADR-012
    ResponseMeta:
      type: object
      required: [request_id]
      properties:
        request_id:
          type: string
          format: uuid
          example: "req_abc123"
        additional:
          type: object
          additionalProperties: true
          description: Th√¥ng tin th√™m (n·∫øu c√≥)
          example:
            service_version: v1.2.3
            login_method: otp

    # üì¶ Envelope th√†nh c√¥ng (data + meta)
    SuccessEnvelope:
      type: object
      required: [data, meta]
      properties:
        data:
          type: object
          additionalProperties: true
        meta:
          $ref: '#/components/schemas/ResponseMeta'

    # üì¶ Envelope l·ªói (error + meta)
    ErrorEnvelope:
      type: object
      required: [error, meta]
      properties:
        data:
          type: object
          nullable: true
          example: null
        error:
          $ref: '#/components/schemas/Error'
        meta:
          $ref: '#/components/schemas/ResponseMeta'

  responses:
    200Success:
      description: Th√†nh c√¥ng
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SuccessEnvelope'
          examples:
            default:
              summary: Th√†nh c√¥ng
              value:
                data:
                  user_id: "u123"
                  full_name: "Nguy·ªÖn VƒÉn A"
                meta:
                  request_id: "req_abc123"

    400BadRequest:
      description: D·ªØ li·ªáu ƒë·∫ßu v√†o kh√¥ng h·ª£p l·ªá
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorEnvelope'
          examples:
            example:
              value:
                error:
                  code: auth.bad_request
                  message: Tr∆∞·ªùng `refresh_token` l√† b·∫Øt bu·ªôc
                meta:
                  request_id: "req_def456"

    401Unauthorized:
      description: Truy c·∫≠p b·ªã t·ª´ ch·ªëi ‚Äì thi·∫øu ho·∫∑c sai token
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorEnvelope'
          examples:
            example:
              value:
                error:
                  code: auth.unauthorized
                  message: Y√™u c·∫ßu kh√¥ng h·ª£p l·ªá - c·∫ßn x√°c th·ª±c b·∫±ng JWT token h·ª£p l·ªá
                meta:
                  request_id: "req_xyz001"

    403Forbidden:
      description: Ng∆∞·ªùi d√πng kh√¥ng ƒë·ªß quy·ªÅn
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorEnvelope'
          examples:
            example:
              value:
                error:
                  code: rbac.permission_denied
                  message: B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán h√†nh ƒë·ªông n√†y
                meta:
                  request_id: "req_403"

    422Unprocessable:
      description: D·ªØ li·ªáu g·ª≠i l√™n kh√¥ng h·ª£p l·ªá v·ªÅ logic
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorEnvelope'
          examples:
            example:
              value:
                error:
                  code: auth.invalid_input
                  message: Email kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng
                  details:
                    - field: "email"
                      message: "Email kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng"
                meta:
                  request_id: "req_422"

    429TooManyRequests:
      description: Qu√° gi·ªõi h·∫°n g·ªçi API
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorEnvelope'
          examples:
            example:
              value:
                error:
                  code: system.rate_limited
                  message: V∆∞·ª£t qu√° s·ªë l·∫ßn g·ªçi API cho ph√©p
                meta:
                  request_id: "req_429"

    500InternalError:
      description: L·ªói h·ªá th·ªëng kh√¥ng x√°c ƒë·ªãnh
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorEnvelope'
          examples:
            example:
              value:
                error:
                  code: system.internal_error
                  message: ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh. Vui l√≤ng th·ª≠ l·∫°i sau.
                meta:
                  request_id: "req_500"

paths:
  /oauth2/login:
    post:
      summary: Kh·ªüi t·∫°o lu·ªìng OAuth2 Login
      description: |
        Kh·ªüi t·∫°o ƒëƒÉng nh·∫≠p OAuth2 v·ªõi provider ƒë∆∞·ª£c c·∫•u h√¨nh (Google, Apple‚Ä¶).  
        Tr·∫£ v·ªÅ redirect URL ƒë·ªÉ frontend ƒëi·ªÅu h∆∞·ªõng ng∆∞·ªùi d√πng.
      operationId: oauth2Login
      tags: [OAuth2]
      x-public: true
      x-emits-event: auth.oauth2.login_requested.v1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OAuth2AuthorizeRequest'
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/X-Login-Method'
        - $ref: '#/components/parameters/X-Forwarded-For'
        - $ref: '#/components/parameters/UserAgent'
        - $ref: '#/components/parameters/X-Trace-ID'
      responses:
        '200':
          description: URL ƒëƒÉng nh·∫≠p OAuth2 ƒë∆∞·ª£c tr·∫£ v·ªÅ
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          content:
            application/json:
              schema:
                type: object
                required: [redirect_url]
                properties:
                  redirect_url:
                    type: string
                    format: uri
                    example: "https://accounts.google.com/o/oauth2/auth?client_id=..."
        '400':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/400BadRequest'
        '422':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/422Unprocessable'
        '429':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/429TooManyRequests'
        '500':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/500InternalError'

  /oauth2/callback:
    get:
      summary: OAuth2 Callback
      description: |
        Endpoint ƒë∆∞·ª£c frontend g·ªçi sau khi ng∆∞·ªùi d√πng ho√†n t·∫•t x√°c th·ª±c OAuth2.  
        Ti·∫øn h√†nh trao ƒë·ªïi m√£ code ƒë·ªÉ l·∫•y access_token v√† refresh_token.
      operationId: oauth2Callback
      tags: [OAuth2]
      x-public: true
      x-emits-event: auth.oauth2.callback_received.v1
      parameters:
        - name: code
          in: query
          required: true
          schema:
            type: string
          description: M√£ code do OAuth2 provider tr·∫£ v·ªÅ
        - name: state
          in: query
          required: false
          schema:
            type: string
          description: CSRF token ho·∫∑c state ƒë·ªãnh danh frontend truy·ªÅn v√†o
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/X-Trace-ID'
        - $ref: '#/components/parameters/X-Forwarded-For'
        - $ref: '#/components/parameters/UserAgent'
      responses:
        '200':
          description: Token truy c·∫≠p v√† th√¥ng tin ng∆∞·ªùi d√πng
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuth2CallbackEnvelope'
        '400':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/400BadRequest'
        '422':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/422Unprocessable'
        '429':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/429TooManyRequests'
        '500':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/500InternalError'

  /auth/exchange:
    post:
      summary: Trao ƒë·ªïi m√£ x√°c th·ª±c l·∫•y JWT
      description: |
        Endpoint nh·∫≠n m√£ x√°c th·ª±c t·ª´ frontend (nh∆∞ `code`, `state`, `refresh_token`...)  
        v√† tr·∫£ v·ªÅ JWT token n·∫øu h·ª£p l·ªá.
      operationId: authExchange
      tags: [Token Exchange]
      x-required-permission: auth.exchange
      x-emits-event: auth.token.issued.v1
      x-condition:
        tenant_id: "{{X-Tenant-ID}}"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/OAuth2CallbackPayload'
                - $ref: '#/components/schemas/RefreshTokenRequest'
              discriminator:
                propertyName: exchange_type
              description: |
                Payload x√°c ƒë·ªãnh ph∆∞∆°ng th·ª©c trao ƒë·ªïi token:  
                - Qua m√£ code OAuth2  
                - Qua refresh_token
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/X-Trace-ID'
        - $ref: '#/components/parameters/X-Forwarded-For'
        - $ref: '#/components/parameters/UserAgent'
      responses:
        '200':
          description: C·∫•p ph√°t token th√†nh c√¥ng
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuth2CallbackEnvelope'
        '400':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/400BadRequest'
        '422':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/422Unprocessable'
        '429':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/429TooManyRequests'
        '500':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/500InternalError'

  /me:
    get:
      summary: L·∫•y th√¥ng tin ng∆∞·ªùi d√πng hi·ªán t·∫°i
      description: |
        Tr·∫£ v·ªÅ th√¥ng tin ng∆∞·ªùi d√πng t·ª´ access token k√®m theo c√°c permission ƒë√£ resolve.  
        S·ª≠ d·ª•ng trong qu√° tr√¨nh ƒëƒÉng nh·∫≠p ho·∫∑c x√°c minh phi√™n ho·∫°t ƒë·ªông.
      operationId: getCurrentUser
      tags: [User Info]
      security:
        - BearerAuth: []
      x-required-permission: auth.me.read
      x-condition:
        tenant_id: "{{X-Tenant-ID}}"
        user_id: "{{X-User-ID}}"
      x-emits-event: null
      parameters:
        - $ref: '#/components/parameters/AuthorizationHeader'
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/X-Trace-ID'
        - $ref: '#/components/parameters/UserAgent'
        - $ref: '#/components/parameters/X-Forwarded-For'
        - $ref: '#/components/parameters/X-Login-Method'
      responses:
        '200':
          description: Tr·∫£ v·ªÅ th√¥ng tin ng∆∞·ªùi d√πng
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MeEnvelope'
        '401':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/401Unauthorized'
        '403':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/403Forbidden'
        '429':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/429TooManyRequests'
        '500':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/500InternalError'

  /verify:
    get:
      summary: Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa access token
      description: |
        D√πng ƒë·ªÉ x√°c minh JWT token g·ª≠i l√™n c√≥ h·ª£p l·ªá kh√¥ng, ƒë·ªìng th·ªùi tr·∫£ v·ªÅ th√¥ng tin ng∆∞·ªùi d√πng c∆° b·∫£n.  
        H·ªØu √≠ch trong frontend SPA ho·∫∑c service-level token validation.
      operationId: verifyAccessToken
      tags: [Token Verify]
      security:
        - BearerAuth: []
      x-required-permission: auth.token.verify
      x-condition:
        tenant_id: "{{X-Tenant-ID}}"
        user_id: "{{X-User-ID}}"
      x-emits-event: null
      parameters:
        - $ref: '#/components/parameters/AuthorizationHeader'
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/X-Trace-ID'
        - $ref: '#/components/parameters/UserAgent'
        - $ref: '#/components/parameters/X-Forwarded-For'
        - $ref: '#/components/parameters/X-Login-Method'
      responses:
        '200':
          description: Token h·ª£p l·ªá, tr·∫£ v·ªÅ th√¥ng tin ng∆∞·ªùi d√πng
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MeEnvelope'
        '401':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/401Unauthorized'
        '403':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/403Forbidden'
        '429':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/429TooManyRequests'
        '500':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/500InternalError'

  /providers:
    get:
      summary: Danh s√°ch c√°c OAuth2 provider ƒëang ƒë∆∞·ª£c b·∫≠t
      description: |
        Tr·∫£ v·ªÅ danh s√°ch c√°c nh√† cung c·∫•p OAuth2 hi·ªán ƒë∆∞·ª£c c·∫•u h√¨nh v√† b·∫≠t trong h·ªá th·ªëng.  
        Th∆∞·ªùng ƒë∆∞·ª£c frontend g·ªçi ·ªü m√†n h√¨nh ƒëƒÉng nh·∫≠p ƒë·ªÉ hi·ªÉn th·ªã c√°c l·ª±a ch·ªçn login b·∫±ng Google, Apple, v.v.
      operationId: listProviders
      tags: [Provider Metadata]
      security:
        - BearerAuth: []
      x-required-permission: auth.provider.list
      x-condition:
        tenant_id: "{{X-Tenant-ID}}"
        user_id: "{{X-User-ID}}"
      x-emits-event: null
      parameters:
        - $ref: '#/components/parameters/AuthorizationHeader'
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/X-Trace-ID'
        - $ref: '#/components/parameters/UserAgent'
        - $ref: '#/components/parameters/X-Forwarded-For'
        - $ref: '#/components/parameters/X-Login-Method'
      responses:
        '200':
          description: Danh s√°ch provider hi·ªán h√†nh
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProviderListEnvelope'
        '401':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/401Unauthorized'
        '403':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/403Forbidden'
        '429':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/429TooManyRequests'
        '500':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/500InternalError'

  /auth/otp:
    post:
      summary: G·ª≠i m√£ OTP ƒëƒÉng nh·∫≠p
      description: |
        Kh·ªüi t·∫°o phi√™n OTP login cho ng∆∞·ªùi d√πng d·ª±a tr√™n s·ªë ƒëi·ªán tho·∫°i ho·∫∑c email.  
        M√£ OTP s·∫Ω ƒë∆∞·ª£c g·ª≠i ƒë·∫øn ng∆∞·ªùi d√πng qua k√™nh ph√π h·ª£p (SMS/email).
      operationId: sendOtpLogin
      tags: [OTP Login]
      x-required-permission: null
      x-condition:
        tenant_id: "{{X-Tenant-ID}}"
      x-emits-event: auth.otp.requested.v1
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/X-Trace-ID'
        - $ref: '#/components/parameters/UserAgent'
        - $ref: '#/components/parameters/X-Forwarded-For'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [identifier]
              properties:
                identifier:
                  type: string
                  description: S·ªë ƒëi·ªán tho·∫°i ho·∫∑c email c·ªßa ng∆∞·ªùi d√πng
                  example: "0912345678"
      responses:
        '200':
          description: M√£ OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessEnvelope'
              examples:
                default:
                  value:
                    data: { message: "OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i" }
                    meta:
                      request_id: "req_otp123"
        '400':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/400BadRequest'
        '422':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/422Unprocessable'
        '429':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/429TooManyRequests'
        '500':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/500InternalError'

  /auth/verify-otp:
    post:
      summary: X√°c th·ª±c OTP ƒë·ªÉ ƒëƒÉng nh·∫≠p
      description: |
        Ki·ªÉm tra m√£ OTP h·ª£p l·ªá, n·∫øu ƒë√∫ng s·∫Ω tr·∫£ v·ªÅ access_token v√† refresh_token ƒë·ªÉ ng∆∞·ªùi d√πng ƒëƒÉng nh·∫≠p.
      operationId: verifyOtpLogin
      tags: [OTP Login]
      x-required-permission: null
      x-condition:
        tenant_id: "{{X-Tenant-ID}}"
      x-emits-event: auth.otp.verified.v1
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/X-Trace-ID'
        - $ref: '#/components/parameters/UserAgent'
        - $ref: '#/components/parameters/X-Forwarded-For'
        - $ref: '#/components/parameters/X-Login-Method'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OTPLoginRequest'
      responses:
        '200':
          description: ƒêƒÉng nh·∫≠p OTP th√†nh c√¥ng
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuth2CallbackEnvelope'
        '400':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/400BadRequest'
        '401':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/401Unauthorized'
        '422':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/422Unprocessable'
        '429':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/429TooManyRequests'
        '500':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/500InternalError'

  /auth/login:
    post:
      summary: ƒêƒÉng nh·∫≠p b·∫±ng t√†i kho·∫£n c·ª•c b·ªô (username/password)
      description: |
        Cho ph√©p ng∆∞·ªùi d√πng ƒëƒÉng nh·∫≠p b·∫±ng th√¥ng tin username/password.  
        Tr·∫£ v·ªÅ access_token v√† refresh_token n·∫øu x√°c th·ª±c th√†nh c√¥ng.
      operationId: localLogin
      tags: [Local Login]
      x-required-permission: null
      x-condition: null
      x-emits-event: auth.local.logged_in.v1
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/X-Trace-ID'
        - $ref: '#/components/parameters/UserAgent'
        - $ref: '#/components/parameters/X-Forwarded-For'
        - $ref: '#/components/parameters/X-Login-Method'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocalLoginRequest'
      responses:
        '200':
          description: ƒêƒÉng nh·∫≠p th√†nh c√¥ng
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuth2CallbackEnvelope'
        '400':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/400BadRequest'
        '401':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/401Unauthorized'
        '422':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/422Unprocessable'
        '429':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/429TooManyRequests'
        '500':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/500InternalError'

  /dev/mimic:
    post:
      summary: Gi·∫£ l·∫≠p login user cho m√¥i tr∆∞·ªùng ph√°t tri·ªÉn
      description: |
        Endpoint ch·ªâ d√†nh cho m√¥i tr∆∞·ªùng dev/staging ‚Äì cho ph√©p gi·∫£ l·∫≠p user login ƒë·ªÉ ph·ª•c v·ª• frontend ph√°t tri·ªÉn m√† kh√¥ng c·∫ßn x√°c th·ª±c th·∫≠t.  
        Tr·∫£ v·ªÅ JWT token nh∆∞ c√°c endpoint login th√¥ng th∆∞·ªùng.
      operationId: devMimicLogin
      tags: [Dev Mode]
      x-gateway-enforced: false
      x-required-permission: null
      x-condition: null
      x-emits-event: auth.dev.mimicked.v1
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/X-Trace-ID'
        - $ref: '#/components/parameters/UserAgent'
        - $ref: '#/components/parameters/X-Forwarded-For'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [user_id, full_name, email]
              properties:
                user_id:
                  type: string
                  format: uuid
                  example: "3d690dfe-3d9e-498f-a98f-3a2c45e3ba2b"
                full_name:
                  type: string
                  example: "Nguy·ªÖn VƒÉn Gi·∫£ L·∫≠p"
                email:
                  type: string
                  format: email
                  example: "fake.dev@truongvietanh.edu.vn"
                avatar_url:
                  type: string
                  format: uri
                  nullable: true
                permissions:
                  type: array
                  items:
                    type: string
                  example: ["user.read", "report.export"]
      responses:
        '200':
          description: JWT token ƒë∆∞·ª£c tr·∫£ v·ªÅ th√†nh c√¥ng
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuth2CallbackEnvelope'
        '400':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/400BadRequest'
        '422':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/422Unprocessable'
        '500':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/500InternalError'
