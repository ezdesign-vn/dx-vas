openapi: 3.0.3
info:
  title: Auth Service Master ‚Äì OpenAPI Spec
  version: "1.0.0"
  description: |
    API specification for the Auth Service Master.
    Tu√¢n th·ªß ADR-011 (API Error Format), ADR-012 (API Response Envelope), v√† ADR-006 (Auth Strategy).

    - ƒê∆∞·ª£c s·ª≠ d·ª•ng b·ªüi c√°c h·ªá th·ªëng frontend (admin portal, app), API Gateway, v√† c√°c services n·ªôi b·ªô.
    - T√†i li·ªáu li√™n quan:
      - [Design Document](./design.md)
      - [Interface Contract](./interface-contract.md)
      - [Data Model](./data-model.md)

  contact:
    name: DX VAS Team
    email: dx@truongvietanh.edu.vn

  x-api-version: v1
  x-maintainer: dx-team@truongvietanh.edu.vn
  x-adr-compliance:
    - adr-011-api-error-format
    - adr-012-response-structure
    - adr-026-hard-delete-policy
    - adr-027-data-management-strategy

servers:
  - url: https://api.truongvietanh.edu.vn/auth-master
    description: Production
  - url: https://staging-api.truongvietanh.edu.vn/auth-master
    description: Staging

tags:
  - name: OAuth2
    description: ƒêƒÉng nh·∫≠p v·ªõi Google OAuth2
  - name: Session
    description: L√†m m·ªõi ho·∫∑c thu h·ªìi token
  - name: Me
    description: L·∫•y th√¥ng tin user ƒëang ƒëƒÉng nh·∫≠p
  - name: Provider
    description: L·∫•y danh s√°ch provider ƒëang ƒë∆∞·ª£c b·∫≠t

security:
  - BearerAuth: []

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    AuthorizationHeader:
      name: Authorization
      in: header
      required: true
      schema:
        type: string
      description:  "Bearer JWT token (format: 'Bearer <access_token>')"

    Page:
      name: page
      in: query
      required: false
      description: S·ªë th·ª© t·ª± trang (b·∫Øt ƒë·∫ßu t·ª´ 1)
      schema:
        type: integer
        default: 1
        minimum: 1

    Limit:
      name: limit
      in: query
      required: false
      description: S·ªë b·∫£n ghi m·ªói trang
      schema:
        type: integer
        default: 20
        minimum: 1
        maximum: 100

    SortOrder:
      name: sort_order
      in: query
      required: false
      description: Th·ª© t·ª± s·∫Øp x·∫øp (tƒÉng ho·∫∑c gi·∫£m d·∫ßn)
      schema:
        $ref: '#/components/schemas/SortOrderEnum'

    Provider:
      name: provider
      in: query
      required: true
      description: "T√™n nh√† cung c·∫•p OAuth2 (v√≠ d·ª•: google)"
      schema:
        type: string
        enum: [google]
        example: google

  headers:
    X-Request-ID:
      description: ID ƒë·ªãnh danh duy nh·∫•t cho m·ªói request ‚Äì gi√∫p trace log hi·ªáu qu·∫£
      required: false
      schema:
        type: string
      example: req_01H8X4YJ4GVN3YX4MH6ZQ1M3Q0

  schemas:
    # ‚úÖ Enums
    SortOrderEnum:
      type: string
      enum: [asc, desc]
      description: Th·ª© t·ª± s·∫Øp x·∫øp (tƒÉng/gi·∫£m)
    
    OAuth2AuthorizeRequest:
      type: object
      required: [provider, redirect_uri]
      properties:
        provider:
          type: string
          description: "T√™n provider (v√≠ d·ª•: google)"
          example: "google"
        redirect_uri:
          type: string
          format: uri
          description: URI frontend s·∫Ω x·ª≠ l√Ω sau khi ƒëƒÉng nh·∫≠p th√†nh c√¥ng
          example: "https://frontend.app.vn/auth/callback"

    OAuth2CallbackResponse:
      type: object
      required: [access_token, refresh_token, expires_in]
      properties:
        access_token:
          type: string
          description: JWT d√πng ƒë·ªÉ truy c·∫≠p h·ªá th·ªëng
        refresh_token:
          type: string
          description: Token d√πng ƒë·ªÉ l√†m m·ªõi access_token
        expires_in:
          type: integer
          description: S·ªë gi√¢y access_token c√≥ hi·ªáu l·ª±c
          example: 3600

    RefreshTokenRequest:
      type: object
      required: [refresh_token]
      properties:
        refresh_token:
          type: string
          description: Refresh token h·ª£p l·ªá

    RevokeTokenRequest:
      type: object
      required: [refresh_token]
      properties:
        refresh_token:
          type: string
          description: Refresh token c·∫ßn thu h·ªìi

    MeResponse:
      type: object
      required: [user_id, full_name, email, permissions]
      properties:
        user_id:
          type: string
          format: uuid
          description: ID ng∆∞·ªùi d√πng to√†n c·ª•c
        full_name:
          type: string
          description: T√™n ƒë·∫ßy ƒë·ªß
        email:
          type: string
          format: email
        avatar_url:
          type: string
          format: uri
          nullable: true
          description: URL ·∫£nh ƒë·∫°i di·ªán
        current_tenant_id:
          type: string
          format: uuid
          description: ID tenant hi·ªán t·∫°i (truy c·∫≠p th√¥ng qua token)
        permissions:
          type: array
          items:
            type: string
          description: Danh s√°ch permission ƒëang c√≥ trong tenant hi·ªán t·∫°i

    ProviderOut:
      type: object
      required: [provider, is_enabled]
      properties:
        provider:
          type: string
          description: "T√™n provider (v√≠ d·ª•: 'google')"
          example: "google"
        is_enabled:
          type: boolean
          description: Provider n√†y c√≥ ƒëang ƒë∆∞·ª£c b·∫≠t kh√¥ng

    OAuth2CallbackEnvelope:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/OAuth2CallbackResponse'
        meta:
          $ref: '#/components/schemas/ResponseMeta'
        error:
          type: object
          nullable: true
      required: [data, meta, error]
      example:
        data:
          access_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
          refresh_token: d9f0cf1b-8120-4ff6-9210-ae45cf1f55f6
          expires_in: 3600
        meta:
          request_id: 1a2b3c4d
        error: null

    MeEnvelope:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/MeResponse'
        meta:
          $ref: '#/components/schemas/ResponseMeta'
        error:
          type: object
          nullable: true
      required: [data, meta, error]
      example:
        data:
          user_id: 123e4567-e89b-12d3-a456-426614174000
          full_name: Nguy·ªÖn VƒÉn A
          email: user@example.com
          permissions: [tenant.view_dashboard, tenant.manage_users]
        meta:
          request_id: 7f8a9b0c
        error: null

    ProviderListEnvelope:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ProviderOut'
        meta:
          $ref: '#/components/schemas/ResponseMeta'
        error:
          type: object
          nullable: true
      required: [data, meta, error]
      example:
        data:
          - provider: google
            auth_url: https://accounts.google.com/o/oauth2/auth
            scopes: [openid, email, profile]
        meta:
          request_id: 9e0f1a2b
        error: null

    # üß© Meta wrapper
    ResponseMeta:
      type: object
      properties:
        request_id:
          type: string
          description: M√£ ƒë·ªãnh danh c·ªßa request
          example: "req_abc123"
      required: [request_id]

    ErrorResponse:
      type: object
      properties:
        code:
          type: string
          example: "auth.invalid_token"
        message:
          type: string
          example: "Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n"
      required: [code, message]

    ErrorEnvelope:
      type: object
      properties:
        data:
          type: object
          nullable: true
        meta:
          $ref: '#/components/schemas/ResponseMeta'
        error:
          $ref: '#/components/schemas/ErrorResponse'
      required: [data, meta, error]

  responses:
    UnauthorizedError:
      description: Truy c·∫≠p b·ªã t·ª´ ch·ªëi do kh√¥ng c√≥ ho·∫∑c token kh√¥ng h·ª£p l·ªá
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorEnvelope'
          example:
            error:
              code: unauthorized
              message: Y√™u c·∫ßu kh√¥ng h·ª£p l·ªá - c·∫ßn x√°c th·ª±c b·∫±ng JWT token h·ª£p l·ªá
            data: null
            meta: null

    ForbiddenError:
      description: Ng∆∞·ªùi d√πng kh√¥ng c√≥ quy·ªÅn truy c·∫≠p v√†o t√†i nguy√™n n√†y
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorEnvelope'
          example:
            error:
              code: forbidden
              message: B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán h√†nh ƒë·ªông n√†y
            data: null
            meta: null

    BadRequestError:
      description: D·ªØ li·ªáu ƒë·∫ßu v√†o kh√¥ng h·ª£p l·ªá
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorEnvelope'
          example:
            error:
              code: bad_request
              message: Tr∆∞·ªùng `refresh_token` l√† b·∫Øt bu·ªôc
            data: null
            meta: null

    InternalServerError:
      description: L·ªói h·ªá th·ªëng kh√¥ng x√°c ƒë·ªãnh
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorEnvelope'
          example:
            error:
              code: internal_server_error
              message: ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh. Vui l√≤ng th·ª≠ l·∫°i sau.
            data: null
            meta: null


paths:
  /auth/oauth2/authorize:
    post:
      summary: Kh·ªüi t·∫°o lu·ªìng OAuth2 Login
      description: Kh·ªüi t·∫°o lu·ªìng ƒëƒÉng nh·∫≠p b·∫±ng OAuth2 v·ªõi provider c·ª• th·ªÉ. Tr·∫£ v·ªÅ URL redirect ƒë·ªÉ frontend ƒëi·ªÅu h∆∞·ªõng ng∆∞·ªùi d√πng.
      tags: [OAuth2]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OAuth2AuthorizeRequest'
      responses:
        '200':
          description: Redirect URL tr·∫£ v·ªÅ cho frontend
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          content:
            application/json:
              schema:
                type: object
                properties:
                  redirect_url:
                    type: string
                    format: uri
                    example: "https://accounts.google.com/o/oauth2/auth?..."
        '400':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/BadRequestError'
        '500':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/InternalServerError'
      x-public: true

  /auth/oauth2/callback:
    get:
      summary: OAuth2 Callback
      description: Endpoint frontend g·ªçi sau khi user ƒëƒÉng nh·∫≠p th√†nh c√¥ng v·ªõi provider. Tr·∫£ v·ªÅ access_token v√† refresh_token.
      tags: [OAuth2]
      parameters:
        - name: code
          in: query
          required: true
          schema:
            type: string
          description: Authorization code t·ª´ OAuth2 provider
        - name: state
          in: query
          required: false
          schema:
            type: string
          description: Optional state ƒë·ªÉ x√°c minh CSRF
      responses:
        '200':
          description: Token response
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuth2CallbackEnvelope'
        '400':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/BadRequestError'
        '500':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/InternalServerError'
      x-public: true

  /auth/refresh-token:
    post:
      summary: L√†m m·ªõi access token
      description: Nh·∫≠n refresh_token v√† tr·∫£ v·ªÅ access_token m·ªõi.
      tags: [Session]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: Token m·ªõi ƒë∆∞·ª£c c·∫•p
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuth2CallbackEnvelope'
        '400':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/BadRequestError'
        '500':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/InternalServerError'
      x-public: true

  /auth/revoke-token:
    post:
      summary: Thu h·ªìi refresh token
      description: H·ªßy hi·ªáu l·ª±c refresh token hi·ªán t·∫°i.
      tags: [Session]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RevokeTokenRequest'
      responses:
        '204':
          description: Token ƒë√£ b·ªã thu h·ªìi
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
        '400':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/BadRequestError'
        '500':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/InternalServerError'
      x-public: true

  /auth/me:
    get:
      summary: Th√¥ng tin ng∆∞·ªùi d√πng hi·ªán t·∫°i
      description: Tr·∫£ v·ªÅ th√¥ng tin user ƒëang ƒëƒÉng nh·∫≠p v√† permission hi·ªán t·∫°i.
      tags: [Me]
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/AuthorizationHeader'
      responses:
        '200':
          description: Th√¥ng tin ng∆∞·ªùi d√πng
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MeEnvelope'
        '401':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/ForbiddenError'
        '500':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/InternalServerError'

  /auth/providers:
    get:
      summary: Danh s√°ch c√°c OAuth2 provider ƒëang ƒë∆∞·ª£c b·∫≠t
      description: Tr·∫£ v·ªÅ danh s√°ch c√°c OAuth2 provider ƒë∆∞·ª£c c·∫•u h√¨nh cho h·ªá th·ªëng.
      tags: [Provider]
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/AuthorizationHeader'
      responses:
        '200':
          description: Danh s√°ch provider
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProviderListEnvelope'
        '401':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
          $ref: '#/components/responses/InternalServerError'
